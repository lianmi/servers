// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/lianmi/servers/internal/app/dispatcher"
	"github.com/lianmi/servers/internal/app/dispatcher/controllers"
	"github.com/lianmi/servers/internal/app/dispatcher/grpcclients"
	"github.com/lianmi/servers/internal/app/dispatcher/multichannel"
	"github.com/lianmi/servers/internal/app/dispatcher/nsqMq"
	"github.com/lianmi/servers/internal/app/dispatcher/repositories"
	"github.com/lianmi/servers/internal/app/dispatcher/services"
	"github.com/lianmi/servers/internal/pkg/app"
	"github.com/lianmi/servers/internal/pkg/channel"
	"github.com/lianmi/servers/internal/pkg/config"
	"github.com/lianmi/servers/internal/pkg/consul"
	"github.com/lianmi/servers/internal/pkg/database"
	"github.com/lianmi/servers/internal/pkg/jaeger"
	"github.com/lianmi/servers/internal/pkg/log"
	"github.com/lianmi/servers/internal/pkg/redis"
	"github.com/lianmi/servers/internal/pkg/transports/grpc"
	"github.com/lianmi/servers/internal/pkg/transports/http"
	"github.com/lianmi/servers/internal/pkg/transports/mqtt"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	dispatcherOptions, err := dispatcher.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	nsqOptions, err := nsqMq.NewNsqOptions(viper)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	db, err := database.New(databaseOptions)
	if err != nil {
		return nil, err
	}
	redisOptions, err := redis.NewRedisOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	pool, err := redis.New(redisOptions)
	if err != nil {
		return nil, err
	}
	nsqMqttChannel := channel.NewChannnel()
	nsqChannel := multichannel.NewChannnel()
	lianmiRepository := repositories.NewMysqlLianmiRepository(logger, db, pool, nsqChannel)
	consulOptions, err := consul.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	configuration, err := jaeger.NewConfiguration(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.New(configuration)
	if err != nil {
		return nil, err
	}
	clientOptions, err := grpc.NewClientOptions(viper, tracer)
	if err != nil {
		return nil, err
	}
	client, err := grpc.NewClient(consulOptions, clientOptions)
	if err != nil {
		return nil, err
	}
	lianmiOrderClient, err := grpcclients.NewOrderClient(client)
	if err != nil {
		return nil, err
	}
	lianmiWalletClient, err := grpcclients.NewWalletClient(client)
	if err != nil {
		return nil, err
	}
	lianmiApisService := services.NewLianmiApisService(logger, lianmiRepository, lianmiOrderClient, lianmiWalletClient)
	nsqClient := nsqMq.NewNsqClient(nsqOptions, db, pool, nsqMqttChannel, logger, lianmiApisService, nsqChannel)
	mqttOptions, err := mqtt.NewMQTTOptions(viper)
	if err != nil {
		//TODO
		logger.Error(" mqtt.NewMQTTOptions", zap.Error(err))
		return nil, err
	} else {
		logger.Debug("NewMQTTOptions succeed")
	}
	mqttClient := mqtt.NewMQTTClient(mqttOptions, pool, nsqMqttChannel, logger)
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	lianmiApisController := controllers.NewLianmiApisController(logger, lianmiApisService)
	initControllers := controllers.CreateInitControllersFn(lianmiApisController)
	engine := http.NewRouter(httpOptions, logger, initControllers, tracer)
	apiClient, err := consul.New(consulOptions)
	if err != nil {
		return nil, err
	}
	server, err := http.New(httpOptions, logger, engine, apiClient)
	if err != nil {
		return nil, err
	}
	application, err := dispatcher.NewApp(dispatcherOptions, logger, nsqClient, mqttClient, server, nsqChannel)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(log.ProviderSet, config.ProviderSet, database.ProviderSet, services.ProviderSet, repositories.ProviderSet, consul.ProviderSet, http.ProviderSet, redis.ProviderSet, jaeger.ProviderSet, channel.ProviderSet, multichannel.ProviderSet, nsqMq.ProviderSet, mqtt.ProviderSet, dispatcher.ProviderSet, controllers.ProviderSet, grpc.ProviderSet, grpcclients.ProviderSet)
