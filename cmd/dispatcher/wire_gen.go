// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/lianmi/servers/internal/app/channel"
	"github.com/lianmi/servers/internal/app/dispatcher"
	"github.com/lianmi/servers/internal/pkg/app"
	"github.com/lianmi/servers/internal/pkg/config"
	"github.com/lianmi/servers/internal/pkg/log"
	"github.com/lianmi/servers/internal/pkg/redis"
	"github.com/lianmi/servers/internal/pkg/transports/kafka"
	"github.com/lianmi/servers/internal/pkg/transports/mqtt"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	dispatcherOptions, err := dispatcher.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	kafkaOptions, err := kafka.NewKafkaOptions(viper)
	if err != nil {
		return nil, err
	}
	redisOptions, err := redis.NewRedisOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	pool, err := redis.New(redisOptions)
	if err != nil {
		return nil, err
	}
	nsqMqttChannel := channel.NewChannnel()
	kafkaClient := kafka.NewKafkaClient(kafkaOptions, pool, nsqMqttChannel, logger)
	mqttOptions, err := mqtt.NewMQTTOptions(viper)
	if err != nil {
		return nil, err
	}
	mqttClient := mqtt.NewMQTTClient(mqttOptions, pool, nsqMqttChannel, logger)
	application, err := dispatcher.NewApp(dispatcherOptions, logger, kafkaClient, mqttClient)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(log.ProviderSet, config.ProviderSet, redis.ProviderSet, channel.ProviderSet, kafka.ProviderSet, mqtt.ProviderSet, dispatcher.ProviderSet)
