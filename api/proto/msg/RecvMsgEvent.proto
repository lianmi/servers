syntax = "proto3";
package cloud.lianmi.im.msg;

import "api/proto/msg/MsgTypeEnum.proto";

option go_package = "github.com/lianmi/servers/api/proto/msg";
// 消息接受事件 ， 支持单聊 / 群聊 / 通知 / 订单 / 等 ...
// 通过场景 MessageScene 确定 消息事件的传输场景
// 通过 MessageType 类型判断 body 的数据类型

message RecvMsgEventRsp {
    //传输场景，固定为 C2C或P2P
    //是否必填-是
    MessageScene scene = 1;
    //消息类型
    //是否必填-是
    MessageType type = 2;
    //接受消息事件的内容 , 更具 type 选择处理方式
    //是否必填-否
    bytes body = 3;

    //是否必填-是
    //发送方消息设备ID 如果是S2C 的场景 不用填
    string from = 4;

    //是否必填-是 ， P2P 等端对端的时候使用
    string fromDeviceId = 5;

    //是否必填-是
    //接收方, 根据场景判断to是个人id还是群id
    string recv = 6;

    //服务器分配的消息ID
    //是否必填-是
    string serverMsgId = 7;
    
    // 服务端生成的工作流ID
    string workflowID = 8;

    //消息序号，单个会话内自然递增
    //是否必填-是
    fixed64 seq = 9;

    //是否必填-否 由客户端生成的 uuid , 单聊 / 群聊 等客户端产生的时候需要
    // 服务端下发的不需要uuid
    string uuid = 10;
    
    //服务器处理消息时间，Unix时间戳
    //是否必填-是
    fixed64 time = 11;
}

message MessageNotificationBody {
    // 当消息类型是 通知的时候 使用这个Body
    MessageNotificationType type = 1;
    //最后处理人
    //添加好友，对方接收/拒绝后，该字段填充为对方ID
    //申请入群，管理员通过/拒绝后，该字段填充管理员ID
    //邀请入群，用户通过/拒绝后，该字段填充目标用户ID
    //是否必填-否
    string handledAccount = 2;
    //获取处理者添加的附加信息
    //添加好友，拒绝附言
    //申请入群，拒绝附言
    //邀请入群，拒绝附言
    //是否必填-否
    string handledMsg = 3;

    // 消息状态
    MessageStatus status = 4;

    // 附带的文本 该系统消息的二进制字节, hex
    bytes data = 5;

    // 最终接受者,目标用户账号id
    // 管理员可以看到 系统通知 所以管理员有权限修改
    // 所以推送的时候 需要 同时给 管理员推送
    string to = 6;

}


// 消息事件 类型为文本的时候的 body
message MessageTextBody{
    string text = 1 ;
}

// 消息包类型为附件类型的 body
message MessageAttachBody{
    AttachType type = 1 ; // 附件类型
    bytes attach = 2 ; /// 附件主体
}

// TODO 暂定
message MessageSystemUpdate{

}

