// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: api/proto/msg/RecvMsgEvent.proto

package msg

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RecvMsgEventRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//传输场景，固定为 C2C或P2P
	//是否必填-是
	Scene MessageScene `protobuf:"varint,1,opt,name=scene,proto3,enum=cloud.lianmi.im.msg.MessageScene" json:"scene,omitempty"`
	//消息类型
	//是否必填-是
	Type MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=cloud.lianmi.im.msg.MessageType" json:"type,omitempty"`
	//接受消息事件的内容 , 更具 type 选择处理方式
	//是否必填-否
	Body []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	//是否必填-是
	//发送方消息设备ID 如果是S2C 的场景 不用填
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	//是否必填-是 ， P2P 等端对端的时候使用
	FromDeviceId string `protobuf:"bytes,5,opt,name=fromDeviceId,proto3" json:"fromDeviceId,omitempty"`
	//是否必填-是
	//接收方, 根据场景判断to是个人id还是群id
	Recv string `protobuf:"bytes,6,opt,name=recv,proto3" json:"recv,omitempty"`
	//服务器分配的消息ID
	//是否必填-是
	ServerMsgId string `protobuf:"bytes,7,opt,name=serverMsgId,proto3" json:"serverMsgId,omitempty"`
	// 服务端生成的工作流ID
	WorkflowID string `protobuf:"bytes,8,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	//消息序号，单个会话内自然递增
	//是否必填-是
	Seq uint64 `protobuf:"fixed64,9,opt,name=seq,proto3" json:"seq,omitempty"`
	//是否必填-否 由客户端生成的 uuid , 单聊 / 群聊 等客户端产生的时候需要
	// 服务端下发的不需要uuid
	Uuid string `protobuf:"bytes,10,opt,name=uuid,proto3" json:"uuid,omitempty"`
	//服务器处理消息时间，Unix时间戳
	//是否必填-是
	Time uint64 `protobuf:"fixed64,11,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RecvMsgEventRsp) Reset() {
	*x = RecvMsgEventRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvMsgEventRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvMsgEventRsp) ProtoMessage() {}

func (x *RecvMsgEventRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvMsgEventRsp.ProtoReflect.Descriptor instead.
func (*RecvMsgEventRsp) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{0}
}

func (x *RecvMsgEventRsp) GetScene() MessageScene {
	if x != nil {
		return x.Scene
	}
	return MessageScene_MsgScene_Undefined
}

func (x *RecvMsgEventRsp) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MsgType_Undefined
}

func (x *RecvMsgEventRsp) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RecvMsgEventRsp) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *RecvMsgEventRsp) GetFromDeviceId() string {
	if x != nil {
		return x.FromDeviceId
	}
	return ""
}

func (x *RecvMsgEventRsp) GetRecv() string {
	if x != nil {
		return x.Recv
	}
	return ""
}

func (x *RecvMsgEventRsp) GetServerMsgId() string {
	if x != nil {
		return x.ServerMsgId
	}
	return ""
}

func (x *RecvMsgEventRsp) GetWorkflowID() string {
	if x != nil {
		return x.WorkflowID
	}
	return ""
}

func (x *RecvMsgEventRsp) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *RecvMsgEventRsp) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RecvMsgEventRsp) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type MessageNotificationBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当消息类型是 通知的时候 使用这个Body
	Type MessageNotificationType `protobuf:"varint,1,opt,name=type,proto3,enum=cloud.lianmi.im.msg.MessageNotificationType" json:"type,omitempty"`
	//最后处理人
	//添加好友，对方接收/拒绝后，该字段填充为对方ID
	//申请入群，管理员通过/拒绝后，该字段填充管理员ID
	//邀请入群，用户通过/拒绝后，该字段填充目标用户ID
	//是否必填-否
	HandledAccount string `protobuf:"bytes,2,opt,name=handledAccount,proto3" json:"handledAccount,omitempty"`
	//获取处理者添加的附加信息
	//添加好友，拒绝附言
	//申请入群，拒绝附言
	//邀请入群，拒绝附言
	//是否必填-否
	HandledMsg string `protobuf:"bytes,3,opt,name=handledMsg,proto3" json:"handledMsg,omitempty"`
	// 消息状态
	Status MessageStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cloud.lianmi.im.msg.MessageStatus" json:"status,omitempty"`
	// 附带的文本 该系统消息的二进制字节, hex
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// 最终接受者,目标用户账号id
	// 管理员可以看到 系统通知 所以管理员有权限修改
	// 所以推送的时候 需要 同时给 管理员推送
	To string `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *MessageNotificationBody) Reset() {
	*x = MessageNotificationBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNotificationBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNotificationBody) ProtoMessage() {}

func (x *MessageNotificationBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNotificationBody.ProtoReflect.Descriptor instead.
func (*MessageNotificationBody) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{1}
}

func (x *MessageNotificationBody) GetType() MessageNotificationType {
	if x != nil {
		return x.Type
	}
	return MessageNotificationType_MNT_UNDEFINE
}

func (x *MessageNotificationBody) GetHandledAccount() string {
	if x != nil {
		return x.HandledAccount
	}
	return ""
}

func (x *MessageNotificationBody) GetHandledMsg() string {
	if x != nil {
		return x.HandledMsg
	}
	return ""
}

func (x *MessageNotificationBody) GetStatus() MessageStatus {
	if x != nil {
		return x.Status
	}
	return MessageStatus_MOS_UDEFINE
}

func (x *MessageNotificationBody) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MessageNotificationBody) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

// 消息事件 类型为文本的时候的 body
type MessageTextBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MessageTextBody) Reset() {
	*x = MessageTextBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTextBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTextBody) ProtoMessage() {}

func (x *MessageTextBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTextBody.ProtoReflect.Descriptor instead.
func (*MessageTextBody) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{2}
}

func (x *MessageTextBody) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// 消息包类型为附件类型的 body
type MessageAttachBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   AttachType `protobuf:"varint,1,opt,name=type,proto3,enum=cloud.lianmi.im.msg.AttachType" json:"type,omitempty"` // 附件类型
	Attach []byte     `protobuf:"bytes,2,opt,name=attach,proto3" json:"attach,omitempty"`                                  /// 附件主体
}

func (x *MessageAttachBody) Reset() {
	*x = MessageAttachBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAttachBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAttachBody) ProtoMessage() {}

func (x *MessageAttachBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAttachBody.ProtoReflect.Descriptor instead.
func (*MessageAttachBody) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{3}
}

func (x *MessageAttachBody) GetType() AttachType {
	if x != nil {
		return x.Type
	}
	return AttachType_AttachType_Undefined
}

func (x *MessageAttachBody) GetAttach() []byte {
	if x != nil {
		return x.Attach
	}
	return nil
}

// TODO 暂定
type MessageSystemUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageSystemUpdate) Reset() {
	*x = MessageSystemUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSystemUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSystemUpdate) ProtoMessage() {}

func (x *MessageSystemUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSystemUpdate.ProtoReflect.Descriptor instead.
func (*MessageSystemUpdate) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{4}
}

var File_api_proto_msg_RecvMsgEvent_proto protoreflect.FileDescriptor

var file_api_proto_msg_RecvMsgEvent_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x73, 0x67, 0x2f,
	0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69,
	0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x1a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x63,
	0x76, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e,
	0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x63, 0x76, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x63, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69,
	0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x25, 0x0a,
	0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x60, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x22, 0x15, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x29, 0x5a,
	0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x61, 0x6e,
	0x6d, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_msg_RecvMsgEvent_proto_rawDescOnce sync.Once
	file_api_proto_msg_RecvMsgEvent_proto_rawDescData = file_api_proto_msg_RecvMsgEvent_proto_rawDesc
)

func file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP() []byte {
	file_api_proto_msg_RecvMsgEvent_proto_rawDescOnce.Do(func() {
		file_api_proto_msg_RecvMsgEvent_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_msg_RecvMsgEvent_proto_rawDescData)
	})
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescData
}

var file_api_proto_msg_RecvMsgEvent_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_proto_msg_RecvMsgEvent_proto_goTypes = []interface{}{
	(*RecvMsgEventRsp)(nil),         // 0: cloud.lianmi.im.msg.RecvMsgEventRsp
	(*MessageNotificationBody)(nil), // 1: cloud.lianmi.im.msg.MessageNotificationBody
	(*MessageTextBody)(nil),         // 2: cloud.lianmi.im.msg.MessageTextBody
	(*MessageAttachBody)(nil),       // 3: cloud.lianmi.im.msg.MessageAttachBody
	(*MessageSystemUpdate)(nil),     // 4: cloud.lianmi.im.msg.MessageSystemUpdate
	(MessageScene)(0),               // 5: cloud.lianmi.im.msg.MessageScene
	(MessageType)(0),                // 6: cloud.lianmi.im.msg.MessageType
	(MessageNotificationType)(0),    // 7: cloud.lianmi.im.msg.MessageNotificationType
	(MessageStatus)(0),              // 8: cloud.lianmi.im.msg.MessageStatus
	(AttachType)(0),                 // 9: cloud.lianmi.im.msg.AttachType
}
var file_api_proto_msg_RecvMsgEvent_proto_depIdxs = []int32{
	5, // 0: cloud.lianmi.im.msg.RecvMsgEventRsp.scene:type_name -> cloud.lianmi.im.msg.MessageScene
	6, // 1: cloud.lianmi.im.msg.RecvMsgEventRsp.type:type_name -> cloud.lianmi.im.msg.MessageType
	7, // 2: cloud.lianmi.im.msg.MessageNotificationBody.type:type_name -> cloud.lianmi.im.msg.MessageNotificationType
	8, // 3: cloud.lianmi.im.msg.MessageNotificationBody.status:type_name -> cloud.lianmi.im.msg.MessageStatus
	9, // 4: cloud.lianmi.im.msg.MessageAttachBody.type:type_name -> cloud.lianmi.im.msg.AttachType
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_api_proto_msg_RecvMsgEvent_proto_init() }
func file_api_proto_msg_RecvMsgEvent_proto_init() {
	if File_api_proto_msg_RecvMsgEvent_proto != nil {
		return
	}
	file_api_proto_msg_MsgTypeEnum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvMsgEventRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNotificationBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTextBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAttachBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSystemUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_msg_RecvMsgEvent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_msg_RecvMsgEvent_proto_goTypes,
		DependencyIndexes: file_api_proto_msg_RecvMsgEvent_proto_depIdxs,
		MessageInfos:      file_api_proto_msg_RecvMsgEvent_proto_msgTypes,
	}.Build()
	File_api_proto_msg_RecvMsgEvent_proto = out.File
	file_api_proto_msg_RecvMsgEvent_proto_rawDesc = nil
	file_api_proto_msg_RecvMsgEvent_proto_goTypes = nil
	file_api_proto_msg_RecvMsgEvent_proto_depIdxs = nil
}
