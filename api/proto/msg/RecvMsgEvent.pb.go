// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: api/proto/msg/RecvMsgEvent.proto

package msg

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 通知类型
type MessageNotificationType int32

const (
	MessageNotificationType_MNT_UNDEFINE          MessageNotificationType = 0
	MessageNotificationType_MNT_ApplyFriend       MessageNotificationType = 1   ///< 好友请求
	MessageNotificationType_MNT_PassFriendApply   MessageNotificationType = 2   ///< 对方同意加你为好友
	MessageNotificationType_MNT_RejectFriendApply MessageNotificationType = 3   ///< 对方拒绝添加好友
	MessageNotificationType_MNT_DeleteFriend      MessageNotificationType = 4   ///< 删除好友
	MessageNotificationType_MNT_ApplyJoinTeam     MessageNotificationType = 5   ///< 申请加群请求
	MessageNotificationType_MNT_PassTeamApply     MessageNotificationType = 6   ///< 管理员同意加群申请
	MessageNotificationType_MNT_RejectTeamApply   MessageNotificationType = 7   ///< 管理员拒绝加群申请
	MessageNotificationType_MNT_TeamInvite        MessageNotificationType = 8   ///< 邀请加群
	MessageNotificationType_MNT_PassTeamInvite    MessageNotificationType = 9   ///< 用户同意群邀请
	MessageNotificationType_MNT_RejectTeamInvite  MessageNotificationType = 10  ///< 用户拒绝群邀请
	MessageNotificationType_MNT_DismissTeam       MessageNotificationType = 11  ///< 群被解散
	MessageNotificationType_MNT_KickOffTeam       MessageNotificationType = 12  ///< 被管理员踢出群
	MessageNotificationType_MNT_QuitTeam          MessageNotificationType = 13  ///< 主动退群
	MessageNotificationType_MNT_GrantManager      MessageNotificationType = 14  ///< 设置管理员
	MessageNotificationType_MNT_CancelManager     MessageNotificationType = 15  ///< 取消管理员
	MessageNotificationType_MNT_RevokeTeam        MessageNotificationType = 16  ///< 群已被回收
	MessageNotificationType_MNT_TransferTeam      MessageNotificationType = 17  ///< 转让群
	MessageNotificationType_MNT_UpdateTeam        MessageNotificationType = 18  ///< 更新群资料
	MessageNotificationType_MNT_MuteTeamMember    MessageNotificationType = 19  ///< 群成员禁言/解禁
	MessageNotificationType_MNT_MuteTeam          MessageNotificationType = 20  ///< 设置群组禁言模式
	MessageNotificationType_MNT_UpdateTeamMember  MessageNotificationType = 21  ///< 管理员/群主修改群成员信息
	MessageNotificationType_MNT_CheckTeamInvite   MessageNotificationType = 22  ///< 邀请入群前询问管理员是否同意
	MessageNotificationType_MNT_Customer          MessageNotificationType = 100 ///< 自定义事件消息
)

// Enum value maps for MessageNotificationType.
var (
	MessageNotificationType_name = map[int32]string{
		0:   "MNT_UNDEFINE",
		1:   "MNT_ApplyFriend",
		2:   "MNT_PassFriendApply",
		3:   "MNT_RejectFriendApply",
		4:   "MNT_DeleteFriend",
		5:   "MNT_ApplyJoinTeam",
		6:   "MNT_PassTeamApply",
		7:   "MNT_RejectTeamApply",
		8:   "MNT_TeamInvite",
		9:   "MNT_PassTeamInvite",
		10:  "MNT_RejectTeamInvite",
		11:  "MNT_DismissTeam",
		12:  "MNT_KickOffTeam",
		13:  "MNT_QuitTeam",
		14:  "MNT_GrantManager",
		15:  "MNT_CancelManager",
		16:  "MNT_RevokeTeam",
		17:  "MNT_TransferTeam",
		18:  "MNT_UpdateTeam",
		19:  "MNT_MuteTeamMember",
		20:  "MNT_MuteTeam",
		21:  "MNT_UpdateTeamMember",
		22:  "MNT_CheckTeamInvite",
		100: "MNT_Customer",
	}
	MessageNotificationType_value = map[string]int32{
		"MNT_UNDEFINE":          0,
		"MNT_ApplyFriend":       1,
		"MNT_PassFriendApply":   2,
		"MNT_RejectFriendApply": 3,
		"MNT_DeleteFriend":      4,
		"MNT_ApplyJoinTeam":     5,
		"MNT_PassTeamApply":     6,
		"MNT_RejectTeamApply":   7,
		"MNT_TeamInvite":        8,
		"MNT_PassTeamInvite":    9,
		"MNT_RejectTeamInvite":  10,
		"MNT_DismissTeam":       11,
		"MNT_KickOffTeam":       12,
		"MNT_QuitTeam":          13,
		"MNT_GrantManager":      14,
		"MNT_CancelManager":     15,
		"MNT_RevokeTeam":        16,
		"MNT_TransferTeam":      17,
		"MNT_UpdateTeam":        18,
		"MNT_MuteTeamMember":    19,
		"MNT_MuteTeam":          20,
		"MNT_UpdateTeamMember":  21,
		"MNT_CheckTeamInvite":   22,
		"MNT_Customer":          100,
	}
)

func (x MessageNotificationType) Enum() *MessageNotificationType {
	p := new(MessageNotificationType)
	*p = x
	return p
}

func (x MessageNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_msg_RecvMsgEvent_proto_enumTypes[0].Descriptor()
}

func (MessageNotificationType) Type() protoreflect.EnumType {
	return &file_api_proto_msg_RecvMsgEvent_proto_enumTypes[0]
}

func (x MessageNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageNotificationType.Descriptor instead.
func (MessageNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{0}
}

// 当消息事件类型是 订单的时候的
type MessageOrderEventType int32

const (
	MessageOrderEventType_MOET_UNDEFINE           MessageOrderEventType = 0
	MessageOrderEventType_MOET_MakeOrder          MessageOrderEventType = 30 ///< 发起一个订单
	MessageOrderEventType_MOET_ReceiveOrderr      MessageOrderEventType = 31 ///< 收到一个订单
	MessageOrderEventType_MOET_CancelOrder        MessageOrderEventType = 32 ///< 撤销订单
	MessageOrderEventType_MOET_ReceiveCancelOrder MessageOrderEventType = 33 ///< 收到撤销订单
	MessageOrderEventType_MOET_Deposit            MessageOrderEventType = 50 ///< 发起充值请求
	MessageOrderEventType_MOET_WithDraw           MessageOrderEventType = 51 ///< 发起提现请求
	MessageOrderEventType_MOET_OTCBuy             MessageOrderEventType = 52 ///< 发起一个OTC买单
	MessageOrderEventType_MOET_OTCSell            MessageOrderEventType = 53 ///< 发起一个OTC卖单
	MessageOrderEventType_MOET_AddProduct         MessageOrderEventType = 70 ///< 新增商品
	MessageOrderEventType_MOET_DeleteProduct      MessageOrderEventType = 71 ///< 删除商品
)

// Enum value maps for MessageOrderEventType.
var (
	MessageOrderEventType_name = map[int32]string{
		0:  "MOET_UNDEFINE",
		30: "MOET_MakeOrder",
		31: "MOET_ReceiveOrderr",
		32: "MOET_CancelOrder",
		33: "MOET_ReceiveCancelOrder",
		50: "MOET_Deposit",
		51: "MOET_WithDraw",
		52: "MOET_OTCBuy",
		53: "MOET_OTCSell",
		70: "MOET_AddProduct",
		71: "MOET_DeleteProduct",
	}
	MessageOrderEventType_value = map[string]int32{
		"MOET_UNDEFINE":           0,
		"MOET_MakeOrder":          30,
		"MOET_ReceiveOrderr":      31,
		"MOET_CancelOrder":        32,
		"MOET_ReceiveCancelOrder": 33,
		"MOET_Deposit":            50,
		"MOET_WithDraw":           51,
		"MOET_OTCBuy":             52,
		"MOET_OTCSell":            53,
		"MOET_AddProduct":         70,
		"MOET_DeleteProduct":      71,
	}
)

func (x MessageOrderEventType) Enum() *MessageOrderEventType {
	p := new(MessageOrderEventType)
	*p = x
	return p
}

func (x MessageOrderEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageOrderEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_msg_RecvMsgEvent_proto_enumTypes[1].Descriptor()
}

func (MessageOrderEventType) Type() protoreflect.EnumType {
	return &file_api_proto_msg_RecvMsgEvent_proto_enumTypes[1]
}

func (x MessageOrderEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageOrderEventType.Descriptor instead.
func (MessageOrderEventType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{1}
}

type MessageOrderStatus int32

const (
	MessageOrderStatus_MOS_UDEFINE  MessageOrderStatus = 0 ///< 未定义
	MessageOrderStatus_MOS_Init     MessageOrderStatus = 1 ///<  未处理状态<默认>
	MessageOrderStatus_MOS_Declined MessageOrderStatus = 2 ///<  已拒绝
	MessageOrderStatus_MOS_Expired  MessageOrderStatus = 3 ///<  已过期
	MessageOrderStatus_MOS_Ignored  MessageOrderStatus = 4 ///<  已忽略
	MessageOrderStatus_MOS_Passed   MessageOrderStatus = 5 ///<  已通过验证
	MessageOrderStatus_MOS_Taked    MessageOrderStatus = 6 ///<  已接单
	MessageOrderStatus_MOS_Done     MessageOrderStatus = 7 ///<  已完成订单
)

// Enum value maps for MessageOrderStatus.
var (
	MessageOrderStatus_name = map[int32]string{
		0: "MOS_UDEFINE",
		1: "MOS_Init",
		2: "MOS_Declined",
		3: "MOS_Expired",
		4: "MOS_Ignored",
		5: "MOS_Passed",
		6: "MOS_Taked",
		7: "MOS_Done",
	}
	MessageOrderStatus_value = map[string]int32{
		"MOS_UDEFINE":  0,
		"MOS_Init":     1,
		"MOS_Declined": 2,
		"MOS_Expired":  3,
		"MOS_Ignored":  4,
		"MOS_Passed":   5,
		"MOS_Taked":    6,
		"MOS_Done":     7,
	}
)

func (x MessageOrderStatus) Enum() *MessageOrderStatus {
	p := new(MessageOrderStatus)
	*p = x
	return p
}

func (x MessageOrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageOrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_msg_RecvMsgEvent_proto_enumTypes[2].Descriptor()
}

func (MessageOrderStatus) Type() protoreflect.EnumType {
	return &file_api_proto_msg_RecvMsgEvent_proto_enumTypes[2]
}

func (x MessageOrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageOrderStatus.Descriptor instead.
func (MessageOrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{2}
}

// 订单类型
type MessageOrderType int32

const (
	MessageOrderType_MOT_Undefined    MessageOrderType = 0  ///< 默认
	MessageOrderType_MOT_FreshProduct MessageOrderType = 1  ///< 生鲜产品
	MessageOrderType_MOT_Meat         MessageOrderType = 2  ///< 肉类
	MessageOrderType_MOT_Fruits       MessageOrderType = 3  ///< 水果蔬菜类
	MessageOrderType_MOT_GrainOil     MessageOrderType = 4  ///< 粮油类
	MessageOrderType_MOT_Delicatessen MessageOrderType = 5  ///< 熟食类
	MessageOrderType_MOT_Bakery       MessageOrderType = 6  ///< 面包糕饼类
	MessageOrderType_MOT_HouseKeeping MessageOrderType = 7  ///< 家政
	MessageOrderType_MOT_Lottery      MessageOrderType = 8  ///< 彩票
	MessageOrderType_MOT_Carry        MessageOrderType = 9  ///< 搬运
	MessageOrderType_MOT_Maintenance  MessageOrderType = 10 ///< 维修
)

// Enum value maps for MessageOrderType.
var (
	MessageOrderType_name = map[int32]string{
		0:  "MOT_Undefined",
		1:  "MOT_FreshProduct",
		2:  "MOT_Meat",
		3:  "MOT_Fruits",
		4:  "MOT_GrainOil",
		5:  "MOT_Delicatessen",
		6:  "MOT_Bakery",
		7:  "MOT_HouseKeeping",
		8:  "MOT_Lottery",
		9:  "MOT_Carry",
		10: "MOT_Maintenance",
	}
	MessageOrderType_value = map[string]int32{
		"MOT_Undefined":    0,
		"MOT_FreshProduct": 1,
		"MOT_Meat":         2,
		"MOT_Fruits":       3,
		"MOT_GrainOil":     4,
		"MOT_Delicatessen": 5,
		"MOT_Bakery":       6,
		"MOT_HouseKeeping": 7,
		"MOT_Lottery":      8,
		"MOT_Carry":        9,
		"MOT_Maintenance":  10,
	}
)

func (x MessageOrderType) Enum() *MessageOrderType {
	p := new(MessageOrderType)
	*p = x
	return p
}

func (x MessageOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_msg_RecvMsgEvent_proto_enumTypes[3].Descriptor()
}

func (MessageOrderType) Type() protoreflect.EnumType {
	return &file_api_proto_msg_RecvMsgEvent_proto_enumTypes[3]
}

func (x MessageOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageOrderType.Descriptor instead.
func (MessageOrderType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{3}
}

// 加密消息的时候的 类型枚举
type MessageSecretType int32

const (
	//
	MessageSecretType_MST_UNDEFINE MessageSecretType = 0
	MessageSecretType_MST_PRE_KRY  MessageSecretType = 1 /// 预先消息
	MessageSecretType_MST_MESSAGE  MessageSecretType = 2 /// 加密消息
)

// Enum value maps for MessageSecretType.
var (
	MessageSecretType_name = map[int32]string{
		0: "MST_UNDEFINE",
		1: "MST_PRE_KRY",
		2: "MST_MESSAGE",
	}
	MessageSecretType_value = map[string]int32{
		"MST_UNDEFINE": 0,
		"MST_PRE_KRY":  1,
		"MST_MESSAGE":  2,
	}
)

func (x MessageSecretType) Enum() *MessageSecretType {
	p := new(MessageSecretType)
	*p = x
	return p
}

func (x MessageSecretType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageSecretType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_msg_RecvMsgEvent_proto_enumTypes[4].Descriptor()
}

func (MessageSecretType) Type() protoreflect.EnumType {
	return &file_api_proto_msg_RecvMsgEvent_proto_enumTypes[4]
}

func (x MessageSecretType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageSecretType.Descriptor instead.
func (MessageSecretType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{4}
}

type RecvMsgEventRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//传输场景，固定为 C2C或P2P
	//是否必填-是
	Scene MessageScene `protobuf:"varint,1,opt,name=scene,proto3,enum=cloud.lianmi.im.msg.MessageScene" json:"scene,omitempty"`
	//消息类型
	//是否必填-是
	Type MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=cloud.lianmi.im.msg.MessageType" json:"type,omitempty"`
	//接受消息事件的内容 , 更具 type 选择处理方式
	//是否必填-否
	Body []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	//是否必填-否
	//发送方消息设备ID 如果是S2C 的场景 不用填
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	//是否必填-否 ， P2P 等端对端的时候使用
	FromDeviceId string `protobuf:"bytes,5,opt,name=fromDeviceId,proto3" json:"fromDeviceId,omitempty"`
	//服务器分配的消息ID
	//是否必填-是
	ServerMsgId string `protobuf:"bytes,6,opt,name=serverMsgId,proto3" json:"serverMsgId,omitempty"`
	//消息序号，单个会话内自然递增
	//是否必填-是
	Seq uint64 `protobuf:"fixed64,7,opt,name=seq,proto3" json:"seq,omitempty"`
	//是否必填-否 由客户端生成的 uuid , 单聊 / 群聊 等客户端产生的时候需要
	// 服务端下发的不需要uuid
	Uuid string `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty"`
	//服务器处理消息时间，Unix时间戳
	//是否必填-是
	Time uint64 `protobuf:"fixed64,9,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RecvMsgEventRsp) Reset() {
	*x = RecvMsgEventRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecvMsgEventRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvMsgEventRsp) ProtoMessage() {}

func (x *RecvMsgEventRsp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvMsgEventRsp.ProtoReflect.Descriptor instead.
func (*RecvMsgEventRsp) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{0}
}

func (x *RecvMsgEventRsp) GetScene() MessageScene {
	if x != nil {
		return x.Scene
	}
	return MessageScene_MsgScene_Undefined
}

func (x *RecvMsgEventRsp) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MsgType_Undefined
}

func (x *RecvMsgEventRsp) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RecvMsgEventRsp) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *RecvMsgEventRsp) GetFromDeviceId() string {
	if x != nil {
		return x.FromDeviceId
	}
	return ""
}

func (x *RecvMsgEventRsp) GetServerMsgId() string {
	if x != nil {
		return x.ServerMsgId
	}
	return ""
}

func (x *RecvMsgEventRsp) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *RecvMsgEventRsp) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RecvMsgEventRsp) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type MessageNotificationBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当消息类型是 通知的时候 使用这个Body
	Type MessageNotificationType `protobuf:"varint,1,opt,name=type,proto3,enum=cloud.lianmi.im.msg.MessageNotificationType" json:"type,omitempty"`
	//最后处理人
	//添加好友，对方接收/拒绝后，该字段填充为对方ID
	//申请入群，管理员通过/拒绝后，该字段填充管理员ID
	//邀请入群，用户通过/拒绝后，该字段填充目标用户ID
	//是否必填-否
	HandledAccount string `protobuf:"bytes,2,opt,name=handledAccount,proto3" json:"handledAccount,omitempty"`
	//获取处理者添加的附加信息
	//添加好友，拒绝附言
	//申请入群，拒绝附言
	//邀请入群，拒绝附言
	//是否必填-否
	HandledMsg string `protobuf:"bytes,3,opt,name=handledMsg,proto3" json:"handledMsg,omitempty"`
	// 消息状态 bitset 存储
	Status int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// 附带的文本 该系统消息的文本
	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// 最终接受者
	// 管理员可以看到 系统通知 所以管理员有权限修改
	// 所以推送的时候 需要 同时给 管理员推送
	To string `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *MessageNotificationBody) Reset() {
	*x = MessageNotificationBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNotificationBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNotificationBody) ProtoMessage() {}

func (x *MessageNotificationBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNotificationBody.ProtoReflect.Descriptor instead.
func (*MessageNotificationBody) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{1}
}

func (x *MessageNotificationBody) GetType() MessageNotificationType {
	if x != nil {
		return x.Type
	}
	return MessageNotificationType_MNT_UNDEFINE
}

func (x *MessageNotificationBody) GetHandledAccount() string {
	if x != nil {
		return x.HandledAccount
	}
	return ""
}

func (x *MessageNotificationBody) GetHandledMsg() string {
	if x != nil {
		return x.HandledMsg
	}
	return ""
}

func (x *MessageNotificationBody) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MessageNotificationBody) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MessageNotificationBody) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type MessageOrderBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 订单事件类型
	Type MessageOrderEventType `protobuf:"varint,1,opt,name=type,proto3,enum=cloud.lianmi.im.msg.MessageOrderEventType" json:"type,omitempty"`
	//  订单id
	Orderid       string           `protobuf:"bytes,2,opt,name=orderid,proto3" json:"orderid,omitempty"`
	LeaveComments string           `protobuf:"bytes,3,opt,name=LeaveComments,proto3" json:"LeaveComments,omitempty"` /// 留言
	Ordertype     MessageOrderType `protobuf:"varint,4,opt,name=ordertype,proto3,enum=cloud.lianmi.im.msg.MessageOrderType" json:"ordertype,omitempty"`
	//最后处理人
	//添加好友，对方接收/拒绝后，该字段填充为对方ID
	//申请入群，管理员通过/拒绝后，该字段填充管理员ID
	//邀请入群，用户通过/拒绝后，该字段填充目标用户ID
	//是否必填-否
	HandledAccount string `protobuf:"bytes,5,opt,name=handledAccount,proto3" json:"handledAccount,omitempty"`
	//获取处理者添加的附加信息
	//添加好友，拒绝附言
	//申请入群，拒绝附言
	//邀请入群，拒绝附言
	//是否必填-否
	HandledMsg string `protobuf:"bytes,6,opt,name=handledMsg,proto3" json:"handledMsg,omitempty"`
}

func (x *MessageOrderBody) Reset() {
	*x = MessageOrderBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageOrderBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageOrderBody) ProtoMessage() {}

func (x *MessageOrderBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageOrderBody.ProtoReflect.Descriptor instead.
func (*MessageOrderBody) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{2}
}

func (x *MessageOrderBody) GetType() MessageOrderEventType {
	if x != nil {
		return x.Type
	}
	return MessageOrderEventType_MOET_UNDEFINE
}

func (x *MessageOrderBody) GetOrderid() string {
	if x != nil {
		return x.Orderid
	}
	return ""
}

func (x *MessageOrderBody) GetLeaveComments() string {
	if x != nil {
		return x.LeaveComments
	}
	return ""
}

func (x *MessageOrderBody) GetOrdertype() MessageOrderType {
	if x != nil {
		return x.Ordertype
	}
	return MessageOrderType_MOT_Undefined
}

func (x *MessageOrderBody) GetHandledAccount() string {
	if x != nil {
		return x.HandledAccount
	}
	return ""
}

func (x *MessageOrderBody) GetHandledMsg() string {
	if x != nil {
		return x.HandledMsg
	}
	return ""
}

// 如果是加密消息的时候的Body
type MessageSecretBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type MessageSecretType `protobuf:"varint,1,opt,name=type,proto3,enum=cloud.lianmi.im.msg.MessageSecretType" json:"type,omitempty"`
	// 消息负载
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// 解开 本个body 的 临时公钥
	EpkPub []byte `protobuf:"bytes,3,opt,name=epk_pub,json=epkPub,proto3" json:"epk_pub,omitempty"`
	// 其他特殊结构
	UserData []byte `protobuf:"bytes,4,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (x *MessageSecretBody) Reset() {
	*x = MessageSecretBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSecretBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSecretBody) ProtoMessage() {}

func (x *MessageSecretBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSecretBody.ProtoReflect.Descriptor instead.
func (*MessageSecretBody) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{3}
}

func (x *MessageSecretBody) GetType() MessageSecretType {
	if x != nil {
		return x.Type
	}
	return MessageSecretType_MST_UNDEFINE
}

func (x *MessageSecretBody) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *MessageSecretBody) GetEpkPub() []byte {
	if x != nil {
		return x.EpkPub
	}
	return nil
}

func (x *MessageSecretBody) GetUserData() []byte {
	if x != nil {
		return x.UserData
	}
	return nil
}

// 消息事件 类型为文本的时候的 body
type MessageTextBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MessageTextBody) Reset() {
	*x = MessageTextBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTextBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTextBody) ProtoMessage() {}

func (x *MessageTextBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTextBody.ProtoReflect.Descriptor instead.
func (*MessageTextBody) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{4}
}

func (x *MessageTextBody) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// 消息包类型为附件类型的 body
type MessageAttachBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   AttachType `protobuf:"varint,1,opt,name=type,proto3,enum=cloud.lianmi.im.msg.AttachType" json:"type,omitempty"` // 附件类型
	Attach []byte     `protobuf:"bytes,2,opt,name=attach,proto3" json:"attach,omitempty"`                                  /// 附件主体
}

func (x *MessageAttachBody) Reset() {
	*x = MessageAttachBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAttachBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAttachBody) ProtoMessage() {}

func (x *MessageAttachBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAttachBody.ProtoReflect.Descriptor instead.
func (*MessageAttachBody) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{5}
}

func (x *MessageAttachBody) GetType() AttachType {
	if x != nil {
		return x.Type
	}
	return AttachType_AttachType_Undefined
}

func (x *MessageAttachBody) GetAttach() []byte {
	if x != nil {
		return x.Attach
	}
	return nil
}

// TODO 暂定
type MessageSystemUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageSystemUpdate) Reset() {
	*x = MessageSystemUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSystemUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSystemUpdate) ProtoMessage() {}

func (x *MessageSystemUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msg_RecvMsgEvent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSystemUpdate.ProtoReflect.Descriptor instead.
func (*MessageSystemUpdate) Descriptor() ([]byte, []int) {
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP(), []int{6}
}

var File_api_proto_msg_RecvMsgEvent_proto protoreflect.FileDescriptor

var file_api_proto_msg_RecvMsgEvent_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x73, 0x67, 0x2f,
	0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69,
	0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x1a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x63,
	0x76, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e,
	0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x70, 0x6b, 0x5f, 0x70, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x65, 0x70, 0x6b, 0x50, 0x75, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x60, 0x0a, 0x11, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x22, 0x15, 0x0a, 0x13,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2a, 0xad, 0x04, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4e, 0x54, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4e, 0x54, 0x5f, 0x50, 0x61,
	0x73, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x4e, 0x54, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4e,
	0x54, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4e, 0x54, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4e, 0x54, 0x5f, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x4e, 0x54, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4e, 0x54, 0x5f, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x4e, 0x54, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4e, 0x54, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x4e, 0x54, 0x5f, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d,
	0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4e, 0x54, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66,
	0x66, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4e, 0x54, 0x5f, 0x51,
	0x75, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4e, 0x54,
	0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x10, 0x0e, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x4e, 0x54, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4e, 0x54, 0x5f, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4e,
	0x54, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x11,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4e, 0x54, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4e, 0x54, 0x5f, 0x4d, 0x75, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x4e, 0x54, 0x5f, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x14, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x4e, 0x54, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4e, 0x54, 0x5f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10,
	0x16, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4e, 0x54, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x10, 0x64, 0x2a, 0xfe, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x4d, 0x61, 0x6b, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x72, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x21, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10,
	0x32, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72,
	0x61, 0x77, 0x10, 0x33, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x4f, 0x54, 0x43,
	0x42, 0x75, 0x79, 0x10, 0x34, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x4f, 0x54,
	0x43, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x35, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x45, 0x54, 0x5f,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x46, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x4f, 0x45, 0x54, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x10, 0x47, 0x2a, 0x94, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x4f, 0x53, 0x5f, 0x55, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x4f, 0x53, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f,
	0x53, 0x5f, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x4f, 0x53, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x4f, 0x53, 0x5f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x4f, 0x53, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x4f, 0x53, 0x5f, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x4f, 0x53, 0x5f, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x07, 0x2a, 0xdc, 0x01, 0x0a, 0x10,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x54, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x54, 0x5f, 0x46, 0x72, 0x65, 0x73, 0x68,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x54,
	0x5f, 0x4d, 0x65, 0x61, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x54, 0x5f, 0x46,
	0x72, 0x75, 0x69, 0x74, 0x73, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x54, 0x5f, 0x47,
	0x72, 0x61, 0x69, 0x6e, 0x4f, 0x69, 0x6c, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x54,
	0x5f, 0x44, 0x65, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x54, 0x5f, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x54, 0x5f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4b, 0x65, 0x65, 0x70,
	0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x54, 0x5f, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x54, 0x5f, 0x43, 0x61,
	0x72, 0x72, 0x79, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x54, 0x5f, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x0a, 0x2a, 0x47, 0x0a, 0x11, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4b, 0x52, 0x59,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x02, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x73, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_msg_RecvMsgEvent_proto_rawDescOnce sync.Once
	file_api_proto_msg_RecvMsgEvent_proto_rawDescData = file_api_proto_msg_RecvMsgEvent_proto_rawDesc
)

func file_api_proto_msg_RecvMsgEvent_proto_rawDescGZIP() []byte {
	file_api_proto_msg_RecvMsgEvent_proto_rawDescOnce.Do(func() {
		file_api_proto_msg_RecvMsgEvent_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_msg_RecvMsgEvent_proto_rawDescData)
	})
	return file_api_proto_msg_RecvMsgEvent_proto_rawDescData
}

var file_api_proto_msg_RecvMsgEvent_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_api_proto_msg_RecvMsgEvent_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_proto_msg_RecvMsgEvent_proto_goTypes = []interface{}{
	(MessageNotificationType)(0),    // 0: cloud.lianmi.im.msg.MessageNotificationType
	(MessageOrderEventType)(0),      // 1: cloud.lianmi.im.msg.MessageOrderEventType
	(MessageOrderStatus)(0),         // 2: cloud.lianmi.im.msg.MessageOrderStatus
	(MessageOrderType)(0),           // 3: cloud.lianmi.im.msg.MessageOrderType
	(MessageSecretType)(0),          // 4: cloud.lianmi.im.msg.MessageSecretType
	(*RecvMsgEventRsp)(nil),         // 5: cloud.lianmi.im.msg.RecvMsgEventRsp
	(*MessageNotificationBody)(nil), // 6: cloud.lianmi.im.msg.MessageNotificationBody
	(*MessageOrderBody)(nil),        // 7: cloud.lianmi.im.msg.MessageOrderBody
	(*MessageSecretBody)(nil),       // 8: cloud.lianmi.im.msg.MessageSecretBody
	(*MessageTextBody)(nil),         // 9: cloud.lianmi.im.msg.MessageTextBody
	(*MessageAttachBody)(nil),       // 10: cloud.lianmi.im.msg.MessageAttachBody
	(*MessageSystemUpdate)(nil),     // 11: cloud.lianmi.im.msg.MessageSystemUpdate
	(MessageScene)(0),               // 12: cloud.lianmi.im.msg.MessageScene
	(MessageType)(0),                // 13: cloud.lianmi.im.msg.MessageType
	(AttachType)(0),                 // 14: cloud.lianmi.im.msg.AttachType
}
var file_api_proto_msg_RecvMsgEvent_proto_depIdxs = []int32{
	12, // 0: cloud.lianmi.im.msg.RecvMsgEventRsp.scene:type_name -> cloud.lianmi.im.msg.MessageScene
	13, // 1: cloud.lianmi.im.msg.RecvMsgEventRsp.type:type_name -> cloud.lianmi.im.msg.MessageType
	0,  // 2: cloud.lianmi.im.msg.MessageNotificationBody.type:type_name -> cloud.lianmi.im.msg.MessageNotificationType
	1,  // 3: cloud.lianmi.im.msg.MessageOrderBody.type:type_name -> cloud.lianmi.im.msg.MessageOrderEventType
	3,  // 4: cloud.lianmi.im.msg.MessageOrderBody.ordertype:type_name -> cloud.lianmi.im.msg.MessageOrderType
	4,  // 5: cloud.lianmi.im.msg.MessageSecretBody.type:type_name -> cloud.lianmi.im.msg.MessageSecretType
	14, // 6: cloud.lianmi.im.msg.MessageAttachBody.type:type_name -> cloud.lianmi.im.msg.AttachType
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_api_proto_msg_RecvMsgEvent_proto_init() }
func file_api_proto_msg_RecvMsgEvent_proto_init() {
	if File_api_proto_msg_RecvMsgEvent_proto != nil {
		return
	}
	file_api_proto_msg_MsgTypeEnum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecvMsgEventRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNotificationBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageOrderBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSecretBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTextBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAttachBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msg_RecvMsgEvent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSystemUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_msg_RecvMsgEvent_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_msg_RecvMsgEvent_proto_goTypes,
		DependencyIndexes: file_api_proto_msg_RecvMsgEvent_proto_depIdxs,
		EnumInfos:         file_api_proto_msg_RecvMsgEvent_proto_enumTypes,
		MessageInfos:      file_api_proto_msg_RecvMsgEvent_proto_msgTypes,
	}.Build()
	File_api_proto_msg_RecvMsgEvent_proto = out.File
	file_api_proto_msg_RecvMsgEvent_proto_rawDesc = nil
	file_api_proto_msg_RecvMsgEvent_proto_goTypes = nil
	file_api_proto_msg_RecvMsgEvent_proto_depIdxs = nil
}
