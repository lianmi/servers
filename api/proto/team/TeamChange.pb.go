// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: api/proto/team/TeamChange.proto

package team

import (
	proto "github.com/golang/protobuf/proto"
	user "github.com/lianmi/servers/api/proto/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//2.5.19
//群变更类型:
//1、申请加群请求
//a)当有用户申请加群时，群管理员会收到申请加群事件，可展示给用户，由用户决定是否同意对方加群。
//b)opAccount为申请人ID
//2、申请加群同意/拒绝消息
//a)当管理员同意加群请求时，申请人会收到同意入群的事件，当管理员拒绝时，收到拒绝入群的事件。
//b)opAccount为处理请求的管理员ID
//3、邀请入群消息
//a)当有用户被邀请群时，该用户会收到邀请入群事件，可展示给用户，由用户决定是否同意入群。
//b)opAccount为邀请人ID
//4、邀请入群同意/拒绝消息
//a)当被邀请者同意入群请求时，邀请者会收到同意入群的事件，当被邀请者拒绝时，邀请者会收到拒绝入群的事件。
//b)opAccount为被邀请人ID
//5、群被解散
//a)当群被解散时，全员会收到解散群事件。
//b)opAccount为群主ID
//6、被管理员踢出群
//a)当用户被管理员踢出群组时，被踢成员会收到被踢出群的事件。
//b)opAccount为操作管理员ID
//7、主动退群
//a)当用户主动退出群组时，该用户会收到退群事件，只有退群的用户自己可以收到。当用户调用 退出指令 时成功回调返回，
//  表示已退出成功，此消息主要为了多终端同步，其他终端可以作为更新群列表的时机，本终端可以选择忽略。
//b)opAccount为用户自己ID
//8、设置/取消管理员
//a)当用户被设置为管理员时，可收到被设置管理员的事件通知，当用户被取消管理员时，可收到取消事件，可提示用户。
//b)opAccount为群组ID
//9、群被回收
//a)当群组被系统回收时，全员可收到群组被回收消息。
//10、转让群
//a)当有用户被转让群主时，该用户会收到转让群群事件。
//b)opAccount为群主ID
type TeamChangeType int32

const (
	//无效
	TeamChangeType_Tct_Undefined TeamChangeType = 0
	//申请加群请求
	TeamChangeType_Tct_ApplyJoinTeam TeamChangeType = 1
	//申请加群被同意
	TeamChangeType_Tct_PassTeamApply TeamChangeType = 2
	//申请加群被拒绝
	TeamChangeType_Tct_RejectTeamApply TeamChangeType = 3
	//邀请加群
	TeamChangeType_Tct_TeamInvite TeamChangeType = 4
	//邀请加群被同意
	TeamChangeType_Tct_PassTeamInvite TeamChangeType = 5
	//邀请加群被拒绝
	TeamChangeType_Tct_RejectTeamInvite TeamChangeType = 6
	//群被解散
	TeamChangeType_Tct_DismissTeam TeamChangeType = 7
	//被管理员踢出群
	TeamChangeType_Tct_KickOffTeam TeamChangeType = 8
	//主动退群
	TeamChangeType_Tct_QuitTeam TeamChangeType = 9
	//置管理员
	TeamChangeType_Tct_GrantManager TeamChangeType = 10
	//取消管理员
	TeamChangeType_Tct_CancelManager TeamChangeType = 11
	//群已被回收
	TeamChangeType_Tct_RevokeTeam TeamChangeType = 12
	//转让群
	TeamChangeType_Tct_TransferTeam TeamChangeType = 13
	//更新群资料
	TeamChangeType_Tct_UpdateTeam TeamChangeType = 14
	//群成员禁言/解禁
	TeamChangeType_Tct_MuteTeamMember TeamChangeType = 15
	//设置群组禁言模式
	TeamChangeType_Tct_MuteTeam TeamChangeType = 16
	//管理员修改群成员信息
	TeamChangeType_Tct_UpdateMemberInfo TeamChangeType = 17
)

// Enum value maps for TeamChangeType.
var (
	TeamChangeType_name = map[int32]string{
		0:  "Tct_Undefined",
		1:  "Tct_ApplyJoinTeam",
		2:  "Tct_PassTeamApply",
		3:  "Tct_RejectTeamApply",
		4:  "Tct_TeamInvite",
		5:  "Tct_PassTeamInvite",
		6:  "Tct_RejectTeamInvite",
		7:  "Tct_DismissTeam",
		8:  "Tct_KickOffTeam",
		9:  "Tct_QuitTeam",
		10: "Tct_GrantManager",
		11: "Tct_CancelManager",
		12: "Tct_RevokeTeam",
		13: "Tct_TransferTeam",
		14: "Tct_UpdateTeam",
		15: "Tct_MuteTeamMember",
		16: "Tct_MuteTeam",
		17: "Tct_UpdateMemberInfo",
	}
	TeamChangeType_value = map[string]int32{
		"Tct_Undefined":        0,
		"Tct_ApplyJoinTeam":    1,
		"Tct_PassTeamApply":    2,
		"Tct_RejectTeamApply":  3,
		"Tct_TeamInvite":       4,
		"Tct_PassTeamInvite":   5,
		"Tct_RejectTeamInvite": 6,
		"Tct_DismissTeam":      7,
		"Tct_KickOffTeam":      8,
		"Tct_QuitTeam":         9,
		"Tct_GrantManager":     10,
		"Tct_CancelManager":    11,
		"Tct_RevokeTeam":       12,
		"Tct_TransferTeam":     13,
		"Tct_UpdateTeam":       14,
		"Tct_MuteTeamMember":   15,
		"Tct_MuteTeam":         16,
		"Tct_UpdateMemberInfo": 17,
	}
)

func (x TeamChangeType) Enum() *TeamChangeType {
	p := new(TeamChangeType)
	*p = x
	return p
}

func (x TeamChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_team_TeamChange_proto_enumTypes[0].Descriptor()
}

func (TeamChangeType) Type() protoreflect.EnumType {
	return &file_api_proto_team_TeamChange_proto_enumTypes[0]
}

func (x TeamChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamChangeType.Descriptor instead.
func (TeamChangeType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_team_TeamChange_proto_rawDescGZIP(), []int{0}
}

//2.5.19
//群组系统事件
//当有用户申请加群等事件发生时，管理员会收到邀请加群系统事件，
//用户可根据情况接受请求或者拒绝，相应的消息通过群系统事件展示给用户。
//操作场景:
//1、申请加群请求
//a)当有用户申请加群时，群管理员会收到申请加群事件，可展示给用户，由用户决定是否同意对方加群。
//b)opAccount为申请人ID
//2、申请加群同意/拒绝消息
//a)当管理员同意加群请求时，申请人会收到同意入群的事件，当管理员拒绝时，收到拒绝入群的事件。
//b)opAccount为处理请求的管理员ID
//3、邀请入群消息
//a)当有用户被邀请群时，该用户会收到邀请入群事件，可展示给用户，由用户决定是否同意入群。
//b)opAccount为邀请人ID
//4、邀请入群同意/拒绝消息
//a)当被邀请者同意入群请求时，邀请者会收到同意入群的事件，当被邀请者拒绝时，邀请者会收到拒绝入群的事件。
//b)opAccount为被邀请人ID
//5、群被解散
//a)当群被解散时，全员会收到解散群事件。
//b)opAccount为群主ID
//6、被管理员踢出群
//a)当用户被管理员踢出群组时，被踢成员会收到被踢出群的事件。
//b)opAccount为操作管理员ID
//7、主动退群
//a)当用户主动退出群组时，该用户会收到退群事件，只有退群的用户自己可以收到。当用户调用 退出指令 时成功回调返回，
//  表示已退出成功，此消息主要为了多终端同步，其他终端可以作为更新群列表的时机，本终端可以选择忽略。
//b)opAccount为用户自己ID
//8、设置/取消管理员
//a)当用户被设置为管理员时，可收到被设置管理员的事件通知，当用户被取消管理员时，可收到取消事件，可提示用户。
//b)opAccount为群组ID
//9、群被回收
//a)当群组被系统回收时，全员可收到群组被回收消息。
//10、转让群
//a)当有用户被转让群主时，该用户会收到转让群群事件。
//b)opAccount为群主ID
//11、更新群基础信息
//当群组信息被群主、管理员修改后，所有群成员会收到改时间
//opAccount为修改人用户ID
//teamId 为目标群ID
//teamMembers 包含修改人信息
//newTeamInfo 为群组资料项变更内容
type TeamChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//好友请求记录id
	//是否必填-是
	IdServer string `protobuf:"bytes,1,opt,name=idServer,proto3" json:"idServer,omitempty"`
	//变更类型
	//是否必填-是
	Type TeamChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=cc.lianmi.im.team.TeamChangeType" json:"type,omitempty"`
	//同意或者拒绝理由
	//是否必填-否
	Ps string `protobuf:"bytes,3,opt,name=ps,proto3" json:"ps,omitempty"`
	//操作人账号
	//是否必填-是
	OpAccount string `protobuf:"bytes,4,opt,name=opAccount,proto3" json:"opAccount,omitempty"`
	//群信息
	//是否必填-是
	TeamInfo *Team `protobuf:"bytes,5,opt,name=teamInfo,proto3" json:"teamInfo,omitempty"`
	//群成员用户信息，参考用户模块，用户信息结构
	//除了类型为ApplyJoinTeam，其他类型userInfos不参与传递
	//是否必填-否
	UserInfos []*user.User `protobuf:"bytes,6,rep,name=userInfos,proto3" json:"userInfos,omitempty"`
	//被操作群成员信息，参考群模块群成员信息结构
	//是否必填-否
	TeamMembers []*TeamMemberGet `protobuf:"bytes,7,rep,name=teamMembers,proto3" json:"teamMembers,omitempty"`
	//群组ID, UpdateTeam类型时，非空
	//是否必填-否
	TeamId string `protobuf:"bytes,8,opt,name=teamId,proto3" json:"teamId,omitempty"`
	//群组更新资料内容，UpdateTeam类型时，非空，key取值范围，请参考更新群组
	//TeamProtocal.proto 中TeamField的索引值为key
	//是否必填-否
	NewTeamInfo map[int32]string `protobuf:"bytes,9,rep,name=newTeamInfo,proto3" json:"newTeamInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//群成员是否禁言 true表示禁言、false表示解禁
	//是否必填-否
	Mute bool `protobuf:"varint,10,opt,name=mute,proto3" json:"mute,omitempty"`
	//群组禁言模式
	//是否必填-否
	MuteModel MuteMode `protobuf:"varint,11,opt,name=muteModel,proto3,enum=cc.lianmi.im.team.MuteMode" json:"muteModel,omitempty"`
	//最后修改时间
	//是否必填-是
	Timetag uint64 `protobuf:"fixed64,12,opt,name=timetag,proto3" json:"timetag,omitempty"`
}

func (x *TeamChangeEvent) Reset() {
	*x = TeamChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_team_TeamChange_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamChangeEvent) ProtoMessage() {}

func (x *TeamChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_team_TeamChange_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamChangeEvent.ProtoReflect.Descriptor instead.
func (*TeamChangeEvent) Descriptor() ([]byte, []int) {
	return file_api_proto_team_TeamChange_proto_rawDescGZIP(), []int{0}
}

func (x *TeamChangeEvent) GetIdServer() string {
	if x != nil {
		return x.IdServer
	}
	return ""
}

func (x *TeamChangeEvent) GetType() TeamChangeType {
	if x != nil {
		return x.Type
	}
	return TeamChangeType_Tct_Undefined
}

func (x *TeamChangeEvent) GetPs() string {
	if x != nil {
		return x.Ps
	}
	return ""
}

func (x *TeamChangeEvent) GetOpAccount() string {
	if x != nil {
		return x.OpAccount
	}
	return ""
}

func (x *TeamChangeEvent) GetTeamInfo() *Team {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

func (x *TeamChangeEvent) GetUserInfos() []*user.User {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *TeamChangeEvent) GetTeamMembers() []*TeamMemberGet {
	if x != nil {
		return x.TeamMembers
	}
	return nil
}

func (x *TeamChangeEvent) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *TeamChangeEvent) GetNewTeamInfo() map[int32]string {
	if x != nil {
		return x.NewTeamInfo
	}
	return nil
}

func (x *TeamChangeEvent) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *TeamChangeEvent) GetMuteModel() MuteMode {
	if x != nil {
		return x.MuteModel
	}
	return MuteMode_Mm_Undefined
}

func (x *TeamChangeEvent) GetTimetag() uint64 {
	if x != nil {
		return x.Timetag
	}
	return 0
}

var File_api_proto_team_TeamChange_proto protoreflect.FileDescriptor

var file_api_proto_team_TeamChange_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x2f, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x63, 0x63, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x04,
	0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x63,
	0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x63, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69,
	0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x63, 0x2e,
	0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x42,
	0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x63, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e,
	0x69, 0x6d, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0b, 0x6e, 0x65,
	0x77, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x63, 0x63, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x63, 0x2e, 0x6c, 0x69,
	0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x4d, 0x75, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x67, 0x1a, 0x3e, 0x0a, 0x10, 0x4e, 0x65,
	0x77, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x9b, 0x03, 0x0a, 0x0e, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x63, 0x74, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x63, 0x74, 0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x63, 0x74, 0x5f, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x63, 0x74, 0x5f, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x63, 0x74, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x06, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x63, 0x74, 0x5f, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x63, 0x74, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66,
	0x66, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x63, 0x74, 0x5f, 0x51,
	0x75, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x63, 0x74,
	0x5f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x10, 0x0a, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x63, 0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x63, 0x74, 0x5f, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x63,
	0x74, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x0d,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x63, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x63, 0x74, 0x5f, 0x4d, 0x75, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x63, 0x74, 0x5f, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x10, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x63, 0x74, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x11, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_team_TeamChange_proto_rawDescOnce sync.Once
	file_api_proto_team_TeamChange_proto_rawDescData = file_api_proto_team_TeamChange_proto_rawDesc
)

func file_api_proto_team_TeamChange_proto_rawDescGZIP() []byte {
	file_api_proto_team_TeamChange_proto_rawDescOnce.Do(func() {
		file_api_proto_team_TeamChange_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_team_TeamChange_proto_rawDescData)
	})
	return file_api_proto_team_TeamChange_proto_rawDescData
}

var file_api_proto_team_TeamChange_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_team_TeamChange_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_proto_team_TeamChange_proto_goTypes = []interface{}{
	(TeamChangeType)(0),     // 0: cc.lianmi.im.team.TeamChangeType
	(*TeamChangeEvent)(nil), // 1: cc.lianmi.im.team.TeamChangeEvent
	nil,                     // 2: cc.lianmi.im.team.TeamChangeEvent.NewTeamInfoEntry
	(*Team)(nil),            // 3: cc.lianmi.im.team.Team
	(*user.User)(nil),       // 4: cc.lianmi.im.user.User
	(*TeamMemberGet)(nil),   // 5: cc.lianmi.im.team.TeamMemberGet
	(MuteMode)(0),           // 6: cc.lianmi.im.team.MuteMode
}
var file_api_proto_team_TeamChange_proto_depIdxs = []int32{
	0, // 0: cc.lianmi.im.team.TeamChangeEvent.type:type_name -> cc.lianmi.im.team.TeamChangeType
	3, // 1: cc.lianmi.im.team.TeamChangeEvent.teamInfo:type_name -> cc.lianmi.im.team.Team
	4, // 2: cc.lianmi.im.team.TeamChangeEvent.userInfos:type_name -> cc.lianmi.im.user.User
	5, // 3: cc.lianmi.im.team.TeamChangeEvent.teamMembers:type_name -> cc.lianmi.im.team.TeamMemberGet
	2, // 4: cc.lianmi.im.team.TeamChangeEvent.newTeamInfo:type_name -> cc.lianmi.im.team.TeamChangeEvent.NewTeamInfoEntry
	6, // 5: cc.lianmi.im.team.TeamChangeEvent.muteModel:type_name -> cc.lianmi.im.team.MuteMode
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_api_proto_team_TeamChange_proto_init() }
func file_api_proto_team_TeamChange_proto_init() {
	if File_api_proto_team_TeamChange_proto != nil {
		return
	}
	file_api_proto_team_Team_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_proto_team_TeamChange_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_team_TeamChange_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_team_TeamChange_proto_goTypes,
		DependencyIndexes: file_api_proto_team_TeamChange_proto_depIdxs,
		EnumInfos:         file_api_proto_team_TeamChange_proto_enumTypes,
		MessageInfos:      file_api_proto_team_TeamChange_proto_msgTypes,
	}.Build()
	File_api_proto_team_TeamChange_proto = out.File
	file_api_proto_team_TeamChange_proto_rawDesc = nil
	file_api_proto_team_TeamChange_proto_goTypes = nil
	file_api_proto_team_TeamChange_proto_depIdxs = nil
}
