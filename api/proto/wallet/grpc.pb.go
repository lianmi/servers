// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: api/proto/wallet/grpc.proto

package wallet

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//==== 订单的转账(完成，退款) =====//
type TransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//订单ID
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	//类型， 支付类型，1-向商户付款 ，2-退款
	PayType int32 `protobuf:"varint,2,opt,name=payType,proto3" json:"payType,omitempty"`
}

func (x *TransferReq) Reset() {
	*x = TransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferReq) ProtoMessage() {}

func (x *TransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferReq.ProtoReflect.Descriptor instead.
func (*TransferReq) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *TransferReq) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *TransferReq) GetPayType() int32 {
	if x != nil {
		return x.PayType
	}
	return 0
}

type TransferResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"` //错误码  默认是0为成功， 非0-失败
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`    //错误描述
}

func (x *TransferResp) Reset() {
	*x = TransferResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResp) ProtoMessage() {}

func (x *TransferResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResp.ProtoReflect.Descriptor instead.
func (*TransferResp) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *TransferResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *TransferResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

//======获取钱包余额======//
type GetUserBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetUserBalanceReq) Reset() {
	*x = GetUserBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBalanceReq) ProtoMessage() {}

func (x *GetUserBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBalanceReq.ProtoReflect.Descriptor instead.
func (*GetUserBalanceReq) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserBalanceReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetUserBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceEth    uint64 `protobuf:"fixed64,1,opt,name=balanceEth,proto3" json:"balanceEth,omitempty"`
	BalanceLNMC   uint64 `protobuf:"fixed64,2,opt,name=balanceLNMC,proto3" json:"balanceLNMC,omitempty"`
	WalletAddress string `protobuf:"bytes,3,opt,name=walletAddress,proto3" json:"walletAddress,omitempty"`
}

func (x *GetUserBalanceResp) Reset() {
	*x = GetUserBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBalanceResp) ProtoMessage() {}

func (x *GetUserBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBalanceResp.ProtoReflect.Descriptor instead.
func (*GetUserBalanceResp) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserBalanceResp) GetBalanceEth() uint64 {
	if x != nil {
		return x.BalanceEth
	}
	return 0
}

func (x *GetUserBalanceResp) GetBalanceLNMC() uint64 {
	if x != nil {
		return x.BalanceLNMC
	}
	return 0
}

func (x *GetUserBalanceResp) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

//======根据HD的索引号，获取对应的钱包地址 ======//
type GetWalletAddressbyBip32IndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bip32Index uint64 `protobuf:"fixed64,1,opt,name=bip32index,proto3" json:"bip32index,omitempty"`
}

func (x *GetWalletAddressbyBip32IndexReq) Reset() {
	*x = GetWalletAddressbyBip32IndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletAddressbyBip32IndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletAddressbyBip32IndexReq) ProtoMessage() {}

func (x *GetWalletAddressbyBip32IndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletAddressbyBip32IndexReq.ProtoReflect.Descriptor instead.
func (*GetWalletAddressbyBip32IndexReq) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *GetWalletAddressbyBip32IndexReq) GetBip32Index() uint64 {
	if x != nil {
		return x.Bip32Index
	}
	return 0
}

type GetWalletAddressbyBip32IndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string `protobuf:"bytes,1,opt,name=walletAddress,proto3" json:"walletAddress,omitempty"`
}

func (x *GetWalletAddressbyBip32IndexResp) Reset() {
	*x = GetWalletAddressbyBip32IndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletAddressbyBip32IndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletAddressbyBip32IndexResp) ProtoMessage() {}

func (x *GetWalletAddressbyBip32IndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletAddressbyBip32IndexResp.ProtoReflect.Descriptor instead.
func (*GetWalletAddressbyBip32IndexResp) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetWalletAddressbyBip32IndexResp) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

type OrderImagesOnBlockchainReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 订单ID
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// 商品ID
	ProductID string `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
	//买家注册账号
	BuyUsername string `protobuf:"bytes,3,opt,name=buyUsername,proto3" json:"buyUsername,omitempty"`
	//商户注册账号
	BusinessUsername string `protobuf:"bytes,4,opt,name=businessUsername,proto3" json:"businessUsername,omitempty"`
	//订单内容哈希
	AttachHash string `protobuf:"bytes,5,opt,name=attachHash,proto3" json:"attachHash,omitempty"`
	//换算为wei为单位的订单总金额, 例子： cost=2.0元, amount=200wei
	Amount uint64 `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// 订单图片oss objectId
	OrderImage string `protobuf:"bytes,7,opt,name=orderImage,proto3" json:"orderImage,omitempty"`
}

func (x *OrderImagesOnBlockchainReq) Reset() {
	*x = OrderImagesOnBlockchainReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderImagesOnBlockchainReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderImagesOnBlockchainReq) ProtoMessage() {}

func (x *OrderImagesOnBlockchainReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderImagesOnBlockchainReq.ProtoReflect.Descriptor instead.
func (*OrderImagesOnBlockchainReq) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *OrderImagesOnBlockchainReq) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *OrderImagesOnBlockchainReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OrderImagesOnBlockchainReq) GetBuyUsername() string {
	if x != nil {
		return x.BuyUsername
	}
	return ""
}

func (x *OrderImagesOnBlockchainReq) GetBusinessUsername() string {
	if x != nil {
		return x.BusinessUsername
	}
	return ""
}

func (x *OrderImagesOnBlockchainReq) GetAttachHash() string {
	if x != nil {
		return x.AttachHash
	}
	return ""
}

func (x *OrderImagesOnBlockchainReq) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderImagesOnBlockchainReq) GetOrderImage() string {
	if x != nil {
		return x.OrderImage
	}
	return ""
}

type OrderImagesOnBlockchainResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 订单ID
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// 区块高度
	BlockNumber uint64 `protobuf:"fixed64,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	// 交易哈希hex
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	//时间
	Time uint64 `protobuf:"fixed64,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *OrderImagesOnBlockchainResp) Reset() {
	*x = OrderImagesOnBlockchainResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderImagesOnBlockchainResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderImagesOnBlockchainResp) ProtoMessage() {}

func (x *OrderImagesOnBlockchainResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderImagesOnBlockchainResp.ProtoReflect.Descriptor instead.
func (*OrderImagesOnBlockchainResp) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *OrderImagesOnBlockchainResp) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *OrderImagesOnBlockchainResp) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *OrderImagesOnBlockchainResp) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *OrderImagesOnBlockchainResp) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type DepositForPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//订单号
	TradeNo string `protobuf:"bytes,1,opt,name=tradeNo,proto3" json:"tradeNo,omitempty"`
	//用户账号
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	//充值金额，人民币格式
	TotalAmount float64 `protobuf:"fixed64,3,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
}

func (x *DepositForPayReq) Reset() {
	*x = DepositForPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositForPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositForPayReq) ProtoMessage() {}

func (x *DepositForPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositForPayReq.ProtoReflect.Descriptor instead.
func (*DepositForPayReq) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{8}
}

func (x *DepositForPayReq) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *DepositForPayReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DepositForPayReq) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

type DepositForPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//充值之后的连米币余额
	BalanceLNMC uint64 `protobuf:"fixed64,1,opt,name=balanceLNMC,proto3" json:"balanceLNMC,omitempty"`
	// 区块高度
	BlockNumber uint64 `protobuf:"fixed64,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	// 交易哈希hex
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	//时间
	Time uint64 `protobuf:"fixed64,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DepositForPayResp) Reset() {
	*x = DepositForPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositForPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositForPayResp) ProtoMessage() {}

func (x *DepositForPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositForPayResp.ProtoReflect.Descriptor instead.
func (*DepositForPayResp) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{9}
}

func (x *DepositForPayResp) GetBalanceLNMC() uint64 {
	if x != nil {
		return x.BalanceLNMC
	}
	return 0
}

func (x *DepositForPayResp) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DepositForPayResp) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DepositForPayResp) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// 根据 OrderID 获取此订单在链上的pending状态
type OrderPendingStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//订单ID
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *OrderPendingStateReq) Reset() {
	*x = OrderPendingStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPendingStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPendingStateReq) ProtoMessage() {}

func (x *OrderPendingStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPendingStateReq.ProtoReflect.Descriptor instead.
func (*OrderPendingStateReq) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{10}
}

func (x *OrderPendingStateReq) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

//用户端: 根据 OrderID 获取订单拍照图片
type OrderPendingStateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//pending状态, false表示打包成功， true表示等待中
	Pending bool `protobuf:"varint,1,opt,name=pending,proto3" json:"pending,omitempty"`
	//燃气值
	CumulativeGasUsed uint64 `protobuf:"fixed64,2,opt,name=cumulativeGasUsed,proto3" json:"cumulativeGasUsed,omitempty"`
	//实际燃气值
	GasUsed uint64 `protobuf:"fixed64,3,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	//当前交易的nonce
	Nonce uint64 `protobuf:"fixed64,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// 交易哈希hex
	TxHash string `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
	// 交易区块哈希，如果打包成功就有值
	BlockHash string `protobuf:"bytes,6,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	// 交易区块高度，如果打包成功就有值
	BlockNumber uint64 `protobuf:"fixed64,7,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	// 交易index，如果打包成功就有值
	TransactionIndex uint32 `protobuf:"fixed32,8,opt,name=transactionIndex,proto3" json:"transactionIndex,omitempty"`
}

func (x *OrderPendingStateResp) Reset() {
	*x = OrderPendingStateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_wallet_grpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPendingStateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPendingStateResp) ProtoMessage() {}

func (x *OrderPendingStateResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_wallet_grpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPendingStateResp.ProtoReflect.Descriptor instead.
func (*OrderPendingStateResp) Descriptor() ([]byte, []int) {
	return file_api_proto_wallet_grpc_proto_rawDescGZIP(), []int{11}
}

func (x *OrderPendingStateResp) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *OrderPendingStateResp) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *OrderPendingStateResp) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *OrderPendingStateResp) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *OrderPendingStateResp) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *OrderPendingStateResp) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *OrderPendingStateResp) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *OrderPendingStateResp) GetTransactionIndex() uint32 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

var File_api_proto_wallet_grpc_proto protoreflect.FileDescriptor

var file_api_proto_wallet_grpc_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x2f, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x74, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x4e, 0x4d, 0x43, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x4e,
	0x4d, 0x43, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x62, 0x79, 0x42, 0x69,
	0x70, 0x33, 0x32, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x69, 0x70, 0x33, 0x32, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0a, 0x62, 0x69, 0x70, 0x33, 0x32, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x48, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x62,
	0x79, 0x42, 0x69, 0x70, 0x33, 0x32, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x1a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x75, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x4e, 0x4d, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x4e, 0x4d, 0x43, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x93, 0x02, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0xa4, 0x06, 0x0a, 0x0c,
	0x4c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69,
	0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61,
	0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x91, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x62, 0x79, 0x42, 0x69, 0x70, 0x33, 0x32, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61,
	0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x62, 0x79,
	0x42, 0x69, 0x70, 0x33, 0x32, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x38, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x62, 0x79, 0x42, 0x69, 0x70, 0x33, 0x32, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e,
	0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x4f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0b,
	0x44, 0x6f, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69,
	0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x12, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e,
	0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72,
	0x0a, 0x13, 0x44, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69,
	0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e,
	0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_wallet_grpc_proto_rawDescOnce sync.Once
	file_api_proto_wallet_grpc_proto_rawDescData = file_api_proto_wallet_grpc_proto_rawDesc
)

func file_api_proto_wallet_grpc_proto_rawDescGZIP() []byte {
	file_api_proto_wallet_grpc_proto_rawDescOnce.Do(func() {
		file_api_proto_wallet_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_wallet_grpc_proto_rawDescData)
	})
	return file_api_proto_wallet_grpc_proto_rawDescData
}

var file_api_proto_wallet_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_proto_wallet_grpc_proto_goTypes = []interface{}{
	(*TransferReq)(nil),                      // 0: cloud.lianmi.im.wallet.TransferReq
	(*TransferResp)(nil),                     // 1: cloud.lianmi.im.wallet.TransferResp
	(*GetUserBalanceReq)(nil),                // 2: cloud.lianmi.im.wallet.GetUserBalanceReq
	(*GetUserBalanceResp)(nil),               // 3: cloud.lianmi.im.wallet.GetUserBalanceResp
	(*GetWalletAddressbyBip32IndexReq)(nil),  // 4: cloud.lianmi.im.wallet.GetWalletAddressbyBip32IndexReq
	(*GetWalletAddressbyBip32IndexResp)(nil), // 5: cloud.lianmi.im.wallet.GetWalletAddressbyBip32IndexResp
	(*OrderImagesOnBlockchainReq)(nil),       // 6: cloud.lianmi.im.wallet.OrderImagesOnBlockchainReq
	(*OrderImagesOnBlockchainResp)(nil),      // 7: cloud.lianmi.im.wallet.OrderImagesOnBlockchainResp
	(*DepositForPayReq)(nil),                 // 8: cloud.lianmi.im.wallet.DepositForPayReq
	(*DepositForPayResp)(nil),                // 9: cloud.lianmi.im.wallet.DepositForPayResp
	(*OrderPendingStateReq)(nil),             // 10: cloud.lianmi.im.wallet.OrderPendingStateReq
	(*OrderPendingStateResp)(nil),            // 11: cloud.lianmi.im.wallet.OrderPendingStateResp
	(*PreAlipayReq)(nil),                     // 12: cloud.lianmi.im.wallet.PreAlipayReq
	(*PreAlipayResp)(nil),                    // 13: cloud.lianmi.im.wallet.PreAlipayResp
}
var file_api_proto_wallet_grpc_proto_depIdxs = []int32{
	0,  // 0: cloud.lianmi.im.wallet.LianmiWallet.TransferByOrder:input_type -> cloud.lianmi.im.wallet.TransferReq
	2,  // 1: cloud.lianmi.im.wallet.LianmiWallet.GetUserBalance:input_type -> cloud.lianmi.im.wallet.GetUserBalanceReq
	4,  // 2: cloud.lianmi.im.wallet.LianmiWallet.GetWalletAddressbyBip32Index:input_type -> cloud.lianmi.im.wallet.GetWalletAddressbyBip32IndexReq
	6,  // 3: cloud.lianmi.im.wallet.LianmiWallet.OrderImagesOnBlockchain:input_type -> cloud.lianmi.im.wallet.OrderImagesOnBlockchainReq
	12, // 4: cloud.lianmi.im.wallet.LianmiWallet.DoPreAlipay:input_type -> cloud.lianmi.im.wallet.PreAlipayReq
	8,  // 5: cloud.lianmi.im.wallet.LianmiWallet.DepositForPay:input_type -> cloud.lianmi.im.wallet.DepositForPayReq
	10, // 6: cloud.lianmi.im.wallet.LianmiWallet.DoOrderPendingState:input_type -> cloud.lianmi.im.wallet.OrderPendingStateReq
	1,  // 7: cloud.lianmi.im.wallet.LianmiWallet.TransferByOrder:output_type -> cloud.lianmi.im.wallet.TransferResp
	3,  // 8: cloud.lianmi.im.wallet.LianmiWallet.GetUserBalance:output_type -> cloud.lianmi.im.wallet.GetUserBalanceResp
	5,  // 9: cloud.lianmi.im.wallet.LianmiWallet.GetWalletAddressbyBip32Index:output_type -> cloud.lianmi.im.wallet.GetWalletAddressbyBip32IndexResp
	7,  // 10: cloud.lianmi.im.wallet.LianmiWallet.OrderImagesOnBlockchain:output_type -> cloud.lianmi.im.wallet.OrderImagesOnBlockchainResp
	13, // 11: cloud.lianmi.im.wallet.LianmiWallet.DoPreAlipay:output_type -> cloud.lianmi.im.wallet.PreAlipayResp
	9,  // 12: cloud.lianmi.im.wallet.LianmiWallet.DepositForPay:output_type -> cloud.lianmi.im.wallet.DepositForPayResp
	11, // 13: cloud.lianmi.im.wallet.LianmiWallet.DoOrderPendingState:output_type -> cloud.lianmi.im.wallet.OrderPendingStateResp
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_proto_wallet_grpc_proto_init() }
func file_api_proto_wallet_grpc_proto_init() {
	if File_api_proto_wallet_grpc_proto != nil {
		return
	}
	file_api_proto_wallet_Alipay_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_proto_wallet_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletAddressbyBip32IndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletAddressbyBip32IndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderImagesOnBlockchainReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderImagesOnBlockchainResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositForPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositForPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPendingStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_wallet_grpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPendingStateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_wallet_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_wallet_grpc_proto_goTypes,
		DependencyIndexes: file_api_proto_wallet_grpc_proto_depIdxs,
		MessageInfos:      file_api_proto_wallet_grpc_proto_msgTypes,
	}.Build()
	File_api_proto_wallet_grpc_proto = out.File
	file_api_proto_wallet_grpc_proto_rawDesc = nil
	file_api_proto_wallet_grpc_proto_goTypes = nil
	file_api_proto_wallet_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LianmiWalletClient is the client API for LianmiWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LianmiWalletClient interface {
	//订单的转账(完成，退款)
	TransferByOrder(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error)
	//获取用户钱包eth及LNMC代币余额
	GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceResp, error)
	//根据HD的索引号，获取对应的钱包地址
	GetWalletAddressbyBip32Index(ctx context.Context, in *GetWalletAddressbyBip32IndexReq, opts ...grpc.CallOption) (*GetWalletAddressbyBip32IndexResp, error)
	//订单图片上链
	OrderImagesOnBlockchain(ctx context.Context, in *OrderImagesOnBlockchainReq, opts ...grpc.CallOption) (*OrderImagesOnBlockchainResp, error)
	//支付宝发起预支付
	DoPreAlipay(ctx context.Context, in *PreAlipayReq, opts ...grpc.CallOption) (*PreAlipayResp, error)
	//充值，从ERC20代币总账号转账到目标普通账号
	DepositForPay(ctx context.Context, in *DepositForPayReq, opts ...grpc.CallOption) (*DepositForPayResp, error)
	//查询某个订单对应支付的pending状态
	DoOrderPendingState(ctx context.Context, in *OrderPendingStateReq, opts ...grpc.CallOption) (*OrderPendingStateResp, error)
}

type lianmiWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewLianmiWalletClient(cc grpc.ClientConnInterface) LianmiWalletClient {
	return &lianmiWalletClient{cc}
}

func (c *lianmiWalletClient) TransferByOrder(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransferResp, error) {
	out := new(TransferResp)
	err := c.cc.Invoke(ctx, "/cloud.lianmi.im.wallet.LianmiWallet/TransferByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lianmiWalletClient) GetUserBalance(ctx context.Context, in *GetUserBalanceReq, opts ...grpc.CallOption) (*GetUserBalanceResp, error) {
	out := new(GetUserBalanceResp)
	err := c.cc.Invoke(ctx, "/cloud.lianmi.im.wallet.LianmiWallet/GetUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lianmiWalletClient) GetWalletAddressbyBip32Index(ctx context.Context, in *GetWalletAddressbyBip32IndexReq, opts ...grpc.CallOption) (*GetWalletAddressbyBip32IndexResp, error) {
	out := new(GetWalletAddressbyBip32IndexResp)
	err := c.cc.Invoke(ctx, "/cloud.lianmi.im.wallet.LianmiWallet/GetWalletAddressbyBip32Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lianmiWalletClient) OrderImagesOnBlockchain(ctx context.Context, in *OrderImagesOnBlockchainReq, opts ...grpc.CallOption) (*OrderImagesOnBlockchainResp, error) {
	out := new(OrderImagesOnBlockchainResp)
	err := c.cc.Invoke(ctx, "/cloud.lianmi.im.wallet.LianmiWallet/OrderImagesOnBlockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lianmiWalletClient) DoPreAlipay(ctx context.Context, in *PreAlipayReq, opts ...grpc.CallOption) (*PreAlipayResp, error) {
	out := new(PreAlipayResp)
	err := c.cc.Invoke(ctx, "/cloud.lianmi.im.wallet.LianmiWallet/DoPreAlipay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lianmiWalletClient) DepositForPay(ctx context.Context, in *DepositForPayReq, opts ...grpc.CallOption) (*DepositForPayResp, error) {
	out := new(DepositForPayResp)
	err := c.cc.Invoke(ctx, "/cloud.lianmi.im.wallet.LianmiWallet/DepositForPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lianmiWalletClient) DoOrderPendingState(ctx context.Context, in *OrderPendingStateReq, opts ...grpc.CallOption) (*OrderPendingStateResp, error) {
	out := new(OrderPendingStateResp)
	err := c.cc.Invoke(ctx, "/cloud.lianmi.im.wallet.LianmiWallet/DoOrderPendingState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LianmiWalletServer is the server API for LianmiWallet service.
type LianmiWalletServer interface {
	//订单的转账(完成，退款)
	TransferByOrder(context.Context, *TransferReq) (*TransferResp, error)
	//获取用户钱包eth及LNMC代币余额
	GetUserBalance(context.Context, *GetUserBalanceReq) (*GetUserBalanceResp, error)
	//根据HD的索引号，获取对应的钱包地址
	GetWalletAddressbyBip32Index(context.Context, *GetWalletAddressbyBip32IndexReq) (*GetWalletAddressbyBip32IndexResp, error)
	//订单图片上链
	OrderImagesOnBlockchain(context.Context, *OrderImagesOnBlockchainReq) (*OrderImagesOnBlockchainResp, error)
	//支付宝发起预支付
	DoPreAlipay(context.Context, *PreAlipayReq) (*PreAlipayResp, error)
	//充值，从ERC20代币总账号转账到目标普通账号
	DepositForPay(context.Context, *DepositForPayReq) (*DepositForPayResp, error)
	//查询某个订单对应支付的pending状态
	DoOrderPendingState(context.Context, *OrderPendingStateReq) (*OrderPendingStateResp, error)
}

// UnimplementedLianmiWalletServer can be embedded to have forward compatible implementations.
type UnimplementedLianmiWalletServer struct {
}

func (*UnimplementedLianmiWalletServer) TransferByOrder(context.Context, *TransferReq) (*TransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferByOrder not implemented")
}
func (*UnimplementedLianmiWalletServer) GetUserBalance(context.Context, *GetUserBalanceReq) (*GetUserBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (*UnimplementedLianmiWalletServer) GetWalletAddressbyBip32Index(context.Context, *GetWalletAddressbyBip32IndexReq) (*GetWalletAddressbyBip32IndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletAddressbyBip32Index not implemented")
}
func (*UnimplementedLianmiWalletServer) OrderImagesOnBlockchain(context.Context, *OrderImagesOnBlockchainReq) (*OrderImagesOnBlockchainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderImagesOnBlockchain not implemented")
}
func (*UnimplementedLianmiWalletServer) DoPreAlipay(context.Context, *PreAlipayReq) (*PreAlipayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoPreAlipay not implemented")
}
func (*UnimplementedLianmiWalletServer) DepositForPay(context.Context, *DepositForPayReq) (*DepositForPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositForPay not implemented")
}
func (*UnimplementedLianmiWalletServer) DoOrderPendingState(context.Context, *OrderPendingStateReq) (*OrderPendingStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoOrderPendingState not implemented")
}

func RegisterLianmiWalletServer(s *grpc.Server, srv LianmiWalletServer) {
	s.RegisterService(&_LianmiWallet_serviceDesc, srv)
}

func _LianmiWallet_TransferByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LianmiWalletServer).TransferByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lianmi.im.wallet.LianmiWallet/TransferByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LianmiWalletServer).TransferByOrder(ctx, req.(*TransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LianmiWallet_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LianmiWalletServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lianmi.im.wallet.LianmiWallet/GetUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LianmiWalletServer).GetUserBalance(ctx, req.(*GetUserBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LianmiWallet_GetWalletAddressbyBip32Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletAddressbyBip32IndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LianmiWalletServer).GetWalletAddressbyBip32Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lianmi.im.wallet.LianmiWallet/GetWalletAddressbyBip32Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LianmiWalletServer).GetWalletAddressbyBip32Index(ctx, req.(*GetWalletAddressbyBip32IndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LianmiWallet_OrderImagesOnBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderImagesOnBlockchainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LianmiWalletServer).OrderImagesOnBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lianmi.im.wallet.LianmiWallet/OrderImagesOnBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LianmiWalletServer).OrderImagesOnBlockchain(ctx, req.(*OrderImagesOnBlockchainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LianmiWallet_DoPreAlipay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreAlipayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LianmiWalletServer).DoPreAlipay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lianmi.im.wallet.LianmiWallet/DoPreAlipay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LianmiWalletServer).DoPreAlipay(ctx, req.(*PreAlipayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LianmiWallet_DepositForPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositForPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LianmiWalletServer).DepositForPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lianmi.im.wallet.LianmiWallet/DepositForPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LianmiWalletServer).DepositForPay(ctx, req.(*DepositForPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LianmiWallet_DoOrderPendingState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPendingStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LianmiWalletServer).DoOrderPendingState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.lianmi.im.wallet.LianmiWallet/DoOrderPendingState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LianmiWalletServer).DoOrderPendingState(ctx, req.(*OrderPendingStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LianmiWallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.lianmi.im.wallet.LianmiWallet",
	HandlerType: (*LianmiWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferByOrder",
			Handler:    _LianmiWallet_TransferByOrder_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _LianmiWallet_GetUserBalance_Handler,
		},
		{
			MethodName: "GetWalletAddressbyBip32Index",
			Handler:    _LianmiWallet_GetWalletAddressbyBip32Index_Handler,
		},
		{
			MethodName: "OrderImagesOnBlockchain",
			Handler:    _LianmiWallet_OrderImagesOnBlockchain_Handler,
		},
		{
			MethodName: "DoPreAlipay",
			Handler:    _LianmiWallet_DoPreAlipay_Handler,
		},
		{
			MethodName: "DepositForPay",
			Handler:    _LianmiWallet_DepositForPay_Handler,
		},
		{
			MethodName: "DoOrderPendingState",
			Handler:    _LianmiWallet_DoOrderPendingState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/wallet/grpc.proto",
}
