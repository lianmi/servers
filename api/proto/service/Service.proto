syntax = "proto3";
import "api/proto/user/User.proto";
import "api/proto/global/Global.proto";

package cloud.lianmi.im.serivce;
option go_package = "github.com/lianmi/servers/api/proto/serivce";


//Restful 接口
service LianmiApis {
    //获取用户信息
    rpc GetUser (UserReq) returns (UserRsp);

    //短信验证码
    rpc GenerateSmsCode (SmsCodeReq) returns (SmsCodeResp);

    //注册
    rpc Register (RegisterReq) returns (RegisterResp);

    //登录 Login,  根据手机号及密码， 获取token 
    rpc Login (LoginReq) returns (LoginResp);

    //登出 SignOut,  服务端会删除此用户的Token
    rpc SignOut (SignOutReq) returns (SignOutResp);

    //修改密码
    rpc ChanPasswd (ChanPasswdReq) returns (ChanPasswdResp);

    //查出当前所有空闲的客服id, 用于UI端的联系客服人员
    rpc QueryCustomerServices(CustomerServicesReq) returns (CustomerServicesResp);

    //增加客服技术人员名单， 要先注册
    rpc AddCustomerService(CustomerServicesReq) returns (CustomerServicesResp);

    // 删除客服技术人员
    rpc DeleteCustomerService(CustomerServicesReq) returns (CustomerServicesResp);

    // 修改客服技术人员
    rpc UpdateCustomerService(CustomerServicesReq) returns (CustomerServicesResp);

    // 按条件查出客服评分
    rpc QueryGrades(GradeReq) returns (GradesResp);

    //客服人员增加客服评分记录，以便生成title发送给用户提交评分 
    rpc AddGrade(AddGradeReq) returns (AddGradesResp);
 
    // app用户提交评分
    rpc SubmitGrade(SubmitGradeReq) returns (SubmitGradeResp);

    //查询商户营销方式
    rpc GetMembershipCardSaleMode(MembershipCardSaleModeReq) returns (MembershipCardSaleModeResp);

    //查询商户营销方式, 更改后立即有效 
    rpc SetMembershipCardSaleMode(MembershipCardSaleModeReq) returns (MembershipCardSaleModeResp);

    //用户付费成为会员
    rpc PayForMembership(PayForMembershipReq) returns (PayForMembershipResp);

    //商户查询当前名下用户总数，按月统计付费会员总数及返佣金额，是否已经返佣
    rpc GetBusinessMembership(BusinessMembershipReq) returns (BusinessMembershipResp);

    //用户查询当前发展用户总数（5， 10， 35）及按月统计返佣
   rpc GetNormalMembership(NormalMembershipReq) returns (NormalMembershipResp);

    //申请返佣提现,  商户及用户均可适用,  当用户申请返佣，服务端校验后会下发系统通知给商户，商户收到系统通知后，在专门的页面显示出用户申请返佣的明细，核对正确后，商户转账给用户,  并且提交已返佣的结果。
    //商户返佣则服务端收到申请，运营后台查看，如果核对正确，则转账给商户，并记录转账结果，商户刷新列表，显示已返佣
    rpc AskedWithdraw(AskedWithdrawReq) returns (AskedWithdrawResp);

}

message RespHeader {
    int32 errCode = 1; //错误码  默认是0为成功， 非0-失败
    string errMsg = 2; //错误描述
}

//=== 用户信息 === //
message UserReq {
    string user = 1;
}

message UserRsp {
    user.User  user  = 1;
}

//==== 注册 ===//
message RegisterReq {
    user.User user = 1;
    string smsCode = 2; //短信验证码
}

message RegisterResp {
    string username = 1; //注册成功后返回username
}

//=== 获取短信验证码 ===//
message SmsCodeReq {
    string mobile = 1; //手机号码
}

message SmsCodeResp {
    RespHeader status = 1;
    string smsCode = 2; //短信验证码
}

//==== 修改密码 ===//
message ChanPasswdReq {
    string oldpasswd = 1; //旧密码
    string smsCode = 2; //短信验证码
    string password = 3; //新密码
}

message ChanPasswdResp {
    RespHeader status = 1;
}

//==== 根据用户名及密码登录 ===//
message LoginReq {
    string username = 1; //用户名
    string password = 2; //MD5加密过的
    string smsCode = 3; //短信验证码
}

message LoginResp {
    RespHeader status = 1;
    string accesstoken = 2; //用户token, jwt
}

//==== 登出 =====//
message SignOutReq {
}

message SignOutResp {
 RespHeader status = 1;
}

message CustomerServiceInfo {

    //客服或技术人员的注册账号id
    string username =1;

    //客服或技术人员的工号
    string jobNumber =2;

    //客服或技术人员的类型， 1-客服，2-技术
    global.CustomerServiceType type =3;

    //职称, 技术工程师，技术员等
    string evaluation =4;

    //呢称, 
    string nickName  =5;

}

message CustomerServicesReq {
    //true查询空闲, false -所有 
    bool isIdle = 1;

     //客服或技术人员的注册账号id
    string username =2;

    //客服或技术人员的工号
    string jobNumber =3;

    //客服或技术人员的类型， 1-客服，2-技术 0 - 所有 
    global.CustomerServiceType type =4;

    //职称, 技术工程师，技术员等
    string evaluation =5;

    //呢称, 
    string nickName  =6;
}

message CustomerServicesResp {
    RespHeader status = 1;
    repeated CustomerServiceInfo onlineCustomerServices =2;
}

message GradeInfo  {
    // 本次app用户求助的标题，约定： consult + _+ 日期字符串(20201025) + _ + 编号（自增）
    string Title=1;

	//APP用户的注册账号id
	string AppUsername =2;

	//客服或技术人员的注册账号id
	string CustomerServiceUsername =3;

    //客服或技术人员的工号
	string JobNumber =4;

    //客服或技术人员的类型， 1-客服，2-技术
    global.CustomerServiceType type =5;

    //职称, 技术工程师，技术员等
	string Evaluation =6;

     //呢称
	string NickName =7;

     //问题类型
	string Catalog =8;

    //问题描述
	string Desc =9;
                  
    //评分, 0-3 4-6 7-10
	int32 GradeNum =10;
    
}

//必须由客服技术人员构造title，然后用约定的方式发送给用户，用户在UI弹出评分页面， 填写后提交 
message GradeReq{
    // 本次app用户求助的标题，约定： consult + _+ 日期字符串(20201025) + _ + 编号（自增）
    string Title=1;

	//APP用户的注册账号id
	string AppUsername =2;

	//客服或技术人员的注册账号id
	string CustomerServiceUsername =3;

	 //评分, 0-3 4-6 7-10
	int32 GradeNum =4;

    //页数,第几页
    //默认1
    //是否必填-否
    int32 page = 5; // [default=1];

    //每页成员数量
    //默认20,最大只允许100
    //是否必填-否
    int32 limit = 6; // [default=20];

    //开始时间
    fixed64 startAt = 7;

    //结束时间
    fixed64 endAt = 8;
}

message GradesPage {
    fixed64 totalPage =1;
    repeated GradeInfo grades =2;
}

message GradesResp {
    RespHeader status = 1;
    GradesPage pages =2;
}

//客服人员增加求助记录，以便发给用户评分
message AddGradeReq{

	//客服或技术人员的注册账号id
	string CustomerServiceUsername =1;

     //问题类型
	string Catalog =2;

    //问题描述
	string Desc =3;
}

message GradeTitleInfo {
   //客服或技术人员的注册账号id
   string CustomerServiceUsername =1;

   // 本次app用户求助的标题，约定： consult + _+ 日期字符串(20201025) + _ + 编号（自增）
   string Title=2;
}

message AddGradesResp {
    RespHeader status = 1;
    GradeTitleInfo info =2;
}

//app用户提交评分
message SubmitGradeReq {
  //APP用户的注册账号id
  string AppUsername =1;
  
  // 本次app用户求助的标题，约定： consult + _+ 日期字符串(20201025) + _ + 编号（自增）
  string Title=2;

  //评分, 0-3 4-6 7-10
  int32 GradeNum =3;

}

message SubmitGradeResp {
   RespHeader status = 1;
}

//商户会员卡的营销模式选择
message MembershipCardSaleModeReq {
    string businessUsername =1;
    //会员卡营销方式，1-一级，2-二级
    global.MembershipCardSaleType saleType =2;
}

message MembershipCardSaleModeResp {
   RespHeader status = 1;

   //会员卡营销方式，1-一级，2-二级
   global.MembershipCardSaleType saleType =2;
}


message PayForMembershipReq {
    
}


message PayForMembershipResp {

}

message BusinessMembershipReq {

}

message MembershipMonth {
    //月份 2020-10
    string month =1;

    //当月付费会员数量
    int32 count =2;

    //当月返佣金额
    double rebateMoney =3;

    //是否已经返佣
    bool isRebate =4;

    //返佣的区块高度
    fixed64 blockNumber =5;

    //返佣的交易哈希
    string txHash =6;

    //操作时间
    fixed64 rebateTime =7;


}

message BusinessMembershipInfo {
    // 会员总数
    int32  totalmembers =1;

    //按月统计付费会员 
    repeated MembershipMonth members=2;

}

message BusinessMembershipResp {
  RespHeader status = 1;
  BusinessMembershipInfo monthRecord=2;
}

message NormalMembershipReq {
    //页数,第几页
    //默认1
    //是否必填-否
    int32 page = 1; // [default=1];

    //每页成员数量
    //默认20,最大只允许100
    //是否必填-否
    int32 limit = 2; // [default=20];

    //开始时间
    fixed64 startAt = 3;

    //结束时间
    fixed64 endAt = 4;
}


//用户三级分销的按月统计记录
message PerLevelSummary{
    //月份 2020-10
    string month =1;

    //5元返佣会员数量
    int32 fiveCount =2;

    //10元返佣会员数量
    int32 tenCount =3;

    //35元返佣会员数量
    int32 ThirtyFiveCount =4;

    //当月返佣金额总计
    double rebateTotalMoney =5;

    //是否已经返佣
    bool isRebate =6;

    //返佣的区块高度
    fixed64 blockNumber =7;

    //返佣的交易哈希
    string txHash =8;

    //操作时间
    fixed64 rebateTime =9;
}

message NormalMembershipResp {
    RespHeader status = 1;
    
    //总页数
    fixed64 totalPage =2;

    //按月统计各级返佣
    repeated PerLevelSummary summary=3;
}

message AskedWithdrawReq {

}

message  AskedWithdrawResp {
    
}