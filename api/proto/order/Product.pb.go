// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: api/proto/order/Product.proto

package order

import (
	proto "github.com/golang/protobuf/proto"
	global "github.com/lianmi/servers/api/proto/global"
	msg "github.com/lianmi/servers/api/proto/msg"
	user "github.com/lianmi/servers/api/proto/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//商品图片
type ProductPic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//小图
	Small string `protobuf:"bytes,1,opt,name=small,proto3" json:"small,omitempty"`
	//中图
	Middle string `protobuf:"bytes,2,opt,name=middle,proto3" json:"middle,omitempty"`
	//大图
	Large string `protobuf:"bytes,3,opt,name=large,proto3" json:"large,omitempty"`
}

func (x *ProductPic) Reset() {
	*x = ProductPic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPic) ProtoMessage() {}

func (x *ProductPic) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPic.ProtoReflect.Descriptor instead.
func (*ProductPic) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{0}
}

func (x *ProductPic) GetSmall() string {
	if x != nil {
		return x.Small
	}
	return ""
}

func (x *ProductPic) GetMiddle() string {
	if x != nil {
		return x.Middle
	}
	return ""
}

func (x *ProductPic) GetLarge() string {
	if x != nil {
		return x.Large
	}
	return ""
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商品ID
	ProductId string `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
	//商户注册id
	BusinessUsername string `protobuf:"bytes,2,opt,name=businessUsername,proto3" json:"businessUsername,omitempty"`
	//商品过期时间
	Expire uint64 `protobuf:"fixed64,3,opt,name=expire,proto3" json:"expire,omitempty"`
	//商品名称
	ProductName string `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	//商品种类类型  枚举
	ProductType global.ProductType `protobuf:"varint,5,opt,name=productType,proto3,enum=cloud.lianmi.im.global.ProductType" json:"productType,omitempty"`
	//商品子类型 UI约定 应用在彩票店  1- 双色球  2- 大乐透,  3- 福彩3d ...  如果应用在肉类，1- 排骨 2-五花肉 3-纯瘦肉。。。
	SubType global.LotteryType `protobuf:"varint,6,opt,name=subType,proto3,enum=cloud.lianmi.im.global.LotteryType" json:"subType,omitempty"`
	//商品详细介绍
	ProductDesc string `protobuf:"bytes,7,opt,name=productDesc,proto3" json:"productDesc,omitempty"`
	//商品图片数组，默认是3个图片
	ProductPics []*ProductPic `protobuf:"bytes,8,rep,name=productPics,proto3" json:"productPics,omitempty"`
	//商品短视频
	ShortVideo string `protobuf:"bytes,9,opt,name=shortVideo,proto3" json:"shortVideo,omitempty"`
	//商品短视频缩略图
	Thumbnail string `protobuf:"bytes,10,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	//商品内容详情图片，默认是 6张
	DescPics []string `protobuf:"bytes,11,rep,name=descPics,proto3" json:"descPics,omitempty"`
	//价格
	Price float32 `protobuf:"fixed32,12,opt,name=price,proto3" json:"price,omitempty"`
	//库存数量
	LeftCount uint64 `protobuf:"fixed64,13,opt,name=leftCount,proto3" json:"leftCount,omitempty"`
	//折扣
	//实际数字，例如: 0.95, UI显示为九五折
	Discount float32 `protobuf:"fixed32,14,opt,name=discount,proto3" json:"discount,omitempty"`
	//折扣说明
	DiscountDesc string `protobuf:"bytes,15,opt,name=discountDesc,proto3" json:"discountDesc,omitempty"`
	//折扣开始时间
	DiscountStartTime uint64 `protobuf:"fixed64,16,opt,name=discountStartTime,proto3" json:"discountStartTime,omitempty"`
	//折扣结束时间
	DiscountEndTime uint64 `protobuf:"fixed64,17,opt,name=discountEndTime,proto3" json:"discountEndTime,omitempty"`
	//创建时间
	//是否必须-是
	CreateAt uint64 `protobuf:"fixed64,18,opt,name=createAt,proto3" json:"createAt,omitempty"`
	//最后修改时间
	//是否必须-是
	ModifyAt uint64 `protobuf:"fixed64,19,opt,name=modifyAt,proto3" json:"modifyAt,omitempty"`
	//是否允许撤单， 默认是可以，彩票类的不可以
	AllowCancel bool `protobuf:"varint,20,opt,name=allowCancel,proto3" json:"allowCancel,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{1}
}

func (x *Product) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Product) GetBusinessUsername() string {
	if x != nil {
		return x.BusinessUsername
	}
	return ""
}

func (x *Product) GetExpire() uint64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *Product) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Product) GetProductType() global.ProductType {
	if x != nil {
		return x.ProductType
	}
	return global.ProductType_OT_Undefined
}

func (x *Product) GetSubType() global.LotteryType {
	if x != nil {
		return x.SubType
	}
	return global.LotteryType_LT_Undefined
}

func (x *Product) GetProductDesc() string {
	if x != nil {
		return x.ProductDesc
	}
	return ""
}

func (x *Product) GetProductPics() []*ProductPic {
	if x != nil {
		return x.ProductPics
	}
	return nil
}

func (x *Product) GetShortVideo() string {
	if x != nil {
		return x.ShortVideo
	}
	return ""
}

func (x *Product) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *Product) GetDescPics() []string {
	if x != nil {
		return x.DescPics
	}
	return nil
}

func (x *Product) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetLeftCount() uint64 {
	if x != nil {
		return x.LeftCount
	}
	return 0
}

func (x *Product) GetDiscount() float32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *Product) GetDiscountDesc() string {
	if x != nil {
		return x.DiscountDesc
	}
	return ""
}

func (x *Product) GetDiscountStartTime() uint64 {
	if x != nil {
		return x.DiscountStartTime
	}
	return 0
}

func (x *Product) GetDiscountEndTime() uint64 {
	if x != nil {
		return x.DiscountEndTime
	}
	return 0
}

func (x *Product) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Product) GetModifyAt() uint64 {
	if x != nil {
		return x.ModifyAt
	}
	return 0
}

func (x *Product) GetAllowCancel() bool {
	if x != nil {
		return x.AllowCancel
	}
	return false
}

//下单消息里的商品信息Body
type OrderProductBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//服务端生成订单ID,用于以后此订单的追踪
	OrderID string `protobuf:"bytes,1,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	//商品id
	ProductID string `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
	//买家账号
	BuyUser string `protobuf:"bytes,3,opt,name=buyUser,proto3" json:"buyUser,omitempty"`
	//买家的协商公钥
	OpkBuyUser string `protobuf:"bytes,4,opt,name=opkBuyUser,proto3" json:"opkBuyUser,omitempty"`
	//商户账号
	BusinessUser string `protobuf:"bytes,5,opt,name=businessUser,proto3" json:"businessUser,omitempty"`
	//商户的协商公钥
	OpkBusinessUser string `protobuf:"bytes,6,opt,name=opkBusinessUser,proto3" json:"opkBusinessUser,omitempty"`
	// 订单的总金额, 支付的时候以这个金额 计算服务手续费
	OrderTotalAmount float64 `protobuf:"fixed64,7,opt,name=OrderTotalAmount,proto3" json:"OrderTotalAmount,omitempty"`
	// 附件类型
	AttachType msg.AttachType `protobuf:"varint,8,opt,name=attachType,proto3,enum=cloud.lianmi.im.msg.AttachType" json:"attachType,omitempty"`
	// 附件 , 由 ui 层处理 sdk 仅透传
	// 传输会进过sdk 处理
	Attach string `protobuf:"bytes,9,opt,name=attach,proto3" json:"attach,omitempty"`
	// 透传信息 , 不加密 ，直接传过去 不处理
	Userdata []byte `protobuf:"bytes,10,opt,name=userdata,proto3" json:"userdata,omitempty"`
	//订单的状态;
	State global.OrderState `protobuf:"varint,11,opt,name=state,proto3,enum=cloud.lianmi.im.global.OrderState" json:"state,omitempty"`
	//订单类型, 默认是 正常类型 1
	OrderType global.OrderType `protobuf:"varint,12,opt,name=orderType,proto3,enum=cloud.lianmi.im.global.OrderType" json:"orderType,omitempty"`
	//彩票类型, 默认是0 则不是彩票, 1-99 由UI来定
	SubType global.LotteryType `protobuf:"varint,13,opt,name=subType,proto3,enum=cloud.lianmi.im.global.LotteryType" json:"subType,omitempty"`
	//出票码
	//是否必须-是
	TicketCode uint64 `protobuf:"fixed64,14,opt,name=ticketCode,proto3" json:"ticketCode,omitempty"`
	// 中奖金额
	Prize float64 `protobuf:"fixed64,15,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (x *OrderProductBody) Reset() {
	*x = OrderProductBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderProductBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderProductBody) ProtoMessage() {}

func (x *OrderProductBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderProductBody.ProtoReflect.Descriptor instead.
func (*OrderProductBody) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{2}
}

func (x *OrderProductBody) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *OrderProductBody) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OrderProductBody) GetBuyUser() string {
	if x != nil {
		return x.BuyUser
	}
	return ""
}

func (x *OrderProductBody) GetOpkBuyUser() string {
	if x != nil {
		return x.OpkBuyUser
	}
	return ""
}

func (x *OrderProductBody) GetBusinessUser() string {
	if x != nil {
		return x.BusinessUser
	}
	return ""
}

func (x *OrderProductBody) GetOpkBusinessUser() string {
	if x != nil {
		return x.OpkBusinessUser
	}
	return ""
}

func (x *OrderProductBody) GetOrderTotalAmount() float64 {
	if x != nil {
		return x.OrderTotalAmount
	}
	return 0
}

func (x *OrderProductBody) GetAttachType() msg.AttachType {
	if x != nil {
		return x.AttachType
	}
	return msg.AttachType_AttachType_Undefined
}

func (x *OrderProductBody) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *OrderProductBody) GetUserdata() []byte {
	if x != nil {
		return x.Userdata
	}
	return nil
}

func (x *OrderProductBody) GetState() global.OrderState {
	if x != nil {
		return x.State
	}
	return global.OrderState_OS_Undefined
}

func (x *OrderProductBody) GetOrderType() global.OrderType {
	if x != nil {
		return x.OrderType
	}
	return global.OrderType_ORT_Undefined
}

func (x *OrderProductBody) GetSubType() global.LotteryType {
	if x != nil {
		return x.SubType
	}
	return global.LotteryType_LT_Undefined
}

func (x *OrderProductBody) GetTicketCode() uint64 {
	if x != nil {
		return x.TicketCode
	}
	return 0
}

func (x *OrderProductBody) GetPrize() float64 {
	if x != nil {
		return x.Prize
	}
	return 0
}

//通用商品
type GeneralProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商品ID
	//是否必须-是
	ProductId string `protobuf:"bytes,1,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	//商品名称
	//是否必须-是
	ProductName string `protobuf:"bytes,2,opt,name=ProductName,proto3" json:"ProductName,omitempty"`
	//商品种类类型  枚举
	ProductType global.ProductType `protobuf:"varint,3,opt,name=productType,proto3,enum=cloud.lianmi.im.global.ProductType" json:"productType,omitempty"`
	//商品子类型 UI约定 应用在彩票店  1- 双色球  2- 大乐透,  3- 福彩3d ...  如果应用在肉类，1- 排骨 2-五花肉 3-纯瘦肉。。。
	SubType global.LotteryType `protobuf:"varint,4,opt,name=subType,proto3,enum=cloud.lianmi.im.global.LotteryType" json:"subType,omitempty"`
	//商品详细介绍
	//是否必须-是
	ProductDesc string `protobuf:"bytes,5,opt,name=ProductDesc,proto3" json:"ProductDesc,omitempty"`
	//商品图片数组，默认是3个图片
	ProductPics []*ProductPic `protobuf:"bytes,6,rep,name=productPics,proto3" json:"productPics,omitempty"`
	//商品短视频缩略图
	//是否必须-否
	Thumbnail string `protobuf:"bytes,7,opt,name=Thumbnail,proto3" json:"Thumbnail,omitempty"`
	//商品短视频
	//是否必须-否
	ShortVideo string `protobuf:"bytes,8,opt,name=ShortVideo,proto3" json:"ShortVideo,omitempty"`
	//商品内容详情图片，默认是 6张
	DescPics []string `protobuf:"bytes,9,rep,name=descPics,proto3" json:"descPics,omitempty"`
	//创建时间
	//是否必须-是
	CreateAt uint64 `protobuf:"fixed64,10,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	//最后修改时间
	//是否必须-是
	ModifyAt uint64 `protobuf:"fixed64,11,opt,name=ModifyAt,proto3" json:"ModifyAt,omitempty"`
	//是否允许撤单， 默认是可以，彩票类的不可以
	AllowCancel bool `protobuf:"varint,12,opt,name=AllowCancel,proto3" json:"AllowCancel,omitempty"`
}

func (x *GeneralProduct) Reset() {
	*x = GeneralProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralProduct) ProtoMessage() {}

func (x *GeneralProduct) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralProduct.ProtoReflect.Descriptor instead.
func (*GeneralProduct) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{3}
}

func (x *GeneralProduct) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *GeneralProduct) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *GeneralProduct) GetProductType() global.ProductType {
	if x != nil {
		return x.ProductType
	}
	return global.ProductType_OT_Undefined
}

func (x *GeneralProduct) GetSubType() global.LotteryType {
	if x != nil {
		return x.SubType
	}
	return global.LotteryType_LT_Undefined
}

func (x *GeneralProduct) GetProductDesc() string {
	if x != nil {
		return x.ProductDesc
	}
	return ""
}

func (x *GeneralProduct) GetProductPics() []*ProductPic {
	if x != nil {
		return x.ProductPics
	}
	return nil
}

func (x *GeneralProduct) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *GeneralProduct) GetShortVideo() string {
	if x != nil {
		return x.ShortVideo
	}
	return ""
}

func (x *GeneralProduct) GetDescPics() []string {
	if x != nil {
		return x.DescPics
	}
	return nil
}

func (x *GeneralProduct) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GeneralProduct) GetModifyAt() uint64 {
	if x != nil {
		return x.ModifyAt
	}
	return 0
}

func (x *GeneralProduct) GetAllowCancel() bool {
	if x != nil {
		return x.AllowCancel
	}
	return false
}

//======查询经纬度范围内的商户列表=====//
type QueryStoresNearbyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//店铺类型,对应Global.proto里的StoreType枚举
	StoreType global.StoreType `protobuf:"varint,1,opt,name=storeType,proto3,enum=cloud.lianmi.im.global.StoreType" json:"storeType,omitempty"`
	//商户经营范围搜索关键字, 用半角的逗号隔开
	Keys string `protobuf:"bytes,2,opt,name=keys,proto3" json:"keys,omitempty"`
	//用户当前位置的经度
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	//用户当前位置的经度
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	//半径范围, 默认10km
	Radius float64 `protobuf:"fixed64,5,opt,name=radius,proto3" json:"radius,omitempty"`
	//省份, 可选
	Province string `protobuf:"bytes,6,opt,name=province,proto3" json:"province,omitempty"`
	//城市, 可选
	City string `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	//区, 可选
	County string `protobuf:"bytes,8,opt,name=county,proto3" json:"county,omitempty"`
	//街道, 可选
	Street string `protobuf:"bytes,9,opt,name=street,proto3" json:"street,omitempty"`
	//页数,第几页
	//默认1
	//是否必填-否
	Page int32 `protobuf:"varint,10,opt,name=page,proto3" json:"page,omitempty"` // [default=1];
	//每页成员数量
	//默认20,最大只允许100
	//是否必填-否
	Limit int32 `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"` // [default=20];
	//审核状态，0-预审核，1-审核通过, 2-占位
	State int32 `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *QueryStoresNearbyReq) Reset() {
	*x = QueryStoresNearbyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStoresNearbyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStoresNearbyReq) ProtoMessage() {}

func (x *QueryStoresNearbyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStoresNearbyReq.ProtoReflect.Descriptor instead.
func (*QueryStoresNearbyReq) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{4}
}

func (x *QueryStoresNearbyReq) GetStoreType() global.StoreType {
	if x != nil {
		return x.StoreType
	}
	return global.StoreType_ST_Undefined
}

func (x *QueryStoresNearbyReq) GetKeys() string {
	if x != nil {
		return x.Keys
	}
	return ""
}

func (x *QueryStoresNearbyReq) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *QueryStoresNearbyReq) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *QueryStoresNearbyReq) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *QueryStoresNearbyReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *QueryStoresNearbyReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *QueryStoresNearbyReq) GetCounty() string {
	if x != nil {
		return x.County
	}
	return ""
}

func (x *QueryStoresNearbyReq) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *QueryStoresNearbyReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryStoresNearbyReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryStoresNearbyReq) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type QueryStoresNearbyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//总页数
	TotalPage uint64 `protobuf:"fixed64,1,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	//搜索结果列表
	Stores []*user.Store `protobuf:"bytes,2,rep,name=stores,proto3" json:"stores,omitempty"`
}

func (x *QueryStoresNearbyResp) Reset() {
	*x = QueryStoresNearbyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStoresNearbyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStoresNearbyResp) ProtoMessage() {}

func (x *QueryStoresNearbyResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStoresNearbyResp.ProtoReflect.Descriptor instead.
func (*QueryStoresNearbyResp) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{5}
}

func (x *QueryStoresNearbyResp) GetTotalPage() uint64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *QueryStoresNearbyResp) GetStores() []*user.Store {
	if x != nil {
		return x.Stores
	}
	return nil
}

//获取某个商户的所有商品列表
type ProductsListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商户注册账号
	BusinessUsername string `protobuf:"bytes,1,opt,name=businessUsername,proto3" json:"businessUsername,omitempty"`
	//商品类型
	ProductType global.ProductType `protobuf:"varint,2,opt,name=productType,proto3,enum=cloud.lianmi.im.global.ProductType" json:"productType,omitempty"`
	//关键字, 以空格 隔开
	Keys string `protobuf:"bytes,3,opt,name=keys,proto3" json:"keys,omitempty"`
	//页数,第几页
	//默认1
	//是否必填-否
	Page int32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"` // [default=1];
	//每页成员数量
	//默认20,最大只允许100
	//是否必填-否
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"` // [default=20];
}

func (x *ProductsListReq) Reset() {
	*x = ProductsListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsListReq) ProtoMessage() {}

func (x *ProductsListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsListReq.ProtoReflect.Descriptor instead.
func (*ProductsListReq) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{6}
}

func (x *ProductsListReq) GetBusinessUsername() string {
	if x != nil {
		return x.BusinessUsername
	}
	return ""
}

func (x *ProductsListReq) GetProductType() global.ProductType {
	if x != nil {
		return x.ProductType
	}
	return global.ProductType_OT_Undefined
}

func (x *ProductsListReq) GetKeys() string {
	if x != nil {
		return x.Keys
	}
	return ""
}

func (x *ProductsListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ProductsListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ProductsListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//总页数
	TotalPage uint64 `protobuf:"fixed64,1,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	//搜索结果列表
	Products []*Product `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *ProductsListResp) Reset() {
	*x = ProductsListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsListResp) ProtoMessage() {}

func (x *ProductsListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsListResp.ProtoReflect.Descriptor instead.
func (*ProductsListResp) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{7}
}

func (x *ProductsListResp) GetTotalPage() uint64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *ProductsListResp) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type GetGeneralProductPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商品类型
	ProductType global.ProductType `protobuf:"varint,1,opt,name=productType,proto3,enum=cloud.lianmi.im.global.ProductType" json:"productType,omitempty"`
	//页数,第几页
	//默认1
	//是否必填-否
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"` // [default=1];
	//每页成员数量
	//默认20,最大只允许100
	//是否必填-否
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"` // [default=20];
}

func (x *GetGeneralProductPageReq) Reset() {
	*x = GetGeneralProductPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGeneralProductPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeneralProductPageReq) ProtoMessage() {}

func (x *GetGeneralProductPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeneralProductPageReq.ProtoReflect.Descriptor instead.
func (*GetGeneralProductPageReq) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{8}
}

func (x *GetGeneralProductPageReq) GetProductType() global.ProductType {
	if x != nil {
		return x.ProductType
	}
	return global.ProductType_OT_Undefined
}

func (x *GetGeneralProductPageReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGeneralProductPageReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGeneralProductPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//总页数
	TotalPage uint64 `protobuf:"fixed64,1,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
	//搜索结果列表
	Generalproducts []*GeneralProduct `protobuf:"bytes,2,rep,name=generalproducts,proto3" json:"generalproducts,omitempty"`
}

func (x *GetGeneralProductPageResp) Reset() {
	*x = GetGeneralProductPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGeneralProductPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGeneralProductPageResp) ProtoMessage() {}

func (x *GetGeneralProductPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGeneralProductPageResp.ProtoReflect.Descriptor instead.
func (*GetGeneralProductPageResp) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{9}
}

func (x *GetGeneralProductPageResp) GetTotalPage() uint64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetGeneralProductPageResp) GetGeneralproducts() []*GeneralProduct {
	if x != nil {
		return x.Generalproducts
	}
	return nil
}

type GetProductsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//搜索结果列表
	Products []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *GetProductsResp) Reset() {
	*x = GetProductsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsResp) ProtoMessage() {}

func (x *GetProductsResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsResp.ProtoReflect.Descriptor instead.
func (*GetProductsResp) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{10}
}

func (x *GetProductsResp) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

//设置商品的子类型
type ProductSetSubTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//商品ID
	//是否必须-是
	ProductId string `protobuf:"bytes,1,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	//子类型
	SubType global.LotteryType `protobuf:"varint,2,opt,name=subType,proto3,enum=cloud.lianmi.im.global.LotteryType" json:"subType,omitempty"`
}

func (x *ProductSetSubTypeReq) Reset() {
	*x = ProductSetSubTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSetSubTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSetSubTypeReq) ProtoMessage() {}

func (x *ProductSetSubTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSetSubTypeReq.ProtoReflect.Descriptor instead.
func (*ProductSetSubTypeReq) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{11}
}

func (x *ProductSetSubTypeReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ProductSetSubTypeReq) GetSubType() global.LotteryType {
	if x != nil {
		return x.SubType
	}
	return global.LotteryType_LT_Undefined
}

type ProductSetSubTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductSetSubTypeResp) Reset() {
	*x = ProductSetSubTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_order_Product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSetSubTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSetSubTypeResp) ProtoMessage() {}

func (x *ProductSetSubTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_order_Product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSetSubTypeResp.ProtoReflect.Descriptor instead.
func (*ProductSetSubTypeResp) Descriptor() ([]byte, []int) {
	return file_api_proto_order_Product_proto_rawDescGZIP(), []int{12}
}

var File_api_proto_order_Product_proto protoreflect.FileDescriptor

var file_api_proto_order_Product_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x73, 0x67,
	0x2f, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x50, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x69, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x22, 0xfa, 0x05, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x43, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69,
	0x2e, 0x69, 0x6d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x69, 0x63, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x69, 0x63,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x50, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x50, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x22, 0xe3, 0x04, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x6b, 0x42,
	0x75, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70,
	0x6b, 0x42, 0x75, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f,
	0x6f, 0x70, 0x6b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x6b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c,
	0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c,
	0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61,
	0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e,
	0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x22, 0xf1, 0x03, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69,
	0x6d, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d,
	0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x69, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x69, 0x63, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x50, 0x69, 0x63,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x50, 0x69, 0x63,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0xdd, 0x02, 0x0a, 0x14,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x4e, 0x65, 0x61, 0x72, 0x62,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6a, 0x0a, 0x15, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d,
	0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6c, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e,
	0x69, 0x6d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d, 0x2e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_order_Product_proto_rawDescOnce sync.Once
	file_api_proto_order_Product_proto_rawDescData = file_api_proto_order_Product_proto_rawDesc
)

func file_api_proto_order_Product_proto_rawDescGZIP() []byte {
	file_api_proto_order_Product_proto_rawDescOnce.Do(func() {
		file_api_proto_order_Product_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_order_Product_proto_rawDescData)
	})
	return file_api_proto_order_Product_proto_rawDescData
}

var file_api_proto_order_Product_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_proto_order_Product_proto_goTypes = []interface{}{
	(*ProductPic)(nil),                // 0: cloud.lianmi.im.order.ProductPic
	(*Product)(nil),                   // 1: cloud.lianmi.im.order.Product
	(*OrderProductBody)(nil),          // 2: cloud.lianmi.im.order.OrderProductBody
	(*GeneralProduct)(nil),            // 3: cloud.lianmi.im.order.GeneralProduct
	(*QueryStoresNearbyReq)(nil),      // 4: cloud.lianmi.im.order.QueryStoresNearbyReq
	(*QueryStoresNearbyResp)(nil),     // 5: cloud.lianmi.im.order.QueryStoresNearbyResp
	(*ProductsListReq)(nil),           // 6: cloud.lianmi.im.order.ProductsListReq
	(*ProductsListResp)(nil),          // 7: cloud.lianmi.im.order.ProductsListResp
	(*GetGeneralProductPageReq)(nil),  // 8: cloud.lianmi.im.order.GetGeneralProductPageReq
	(*GetGeneralProductPageResp)(nil), // 9: cloud.lianmi.im.order.GetGeneralProductPageResp
	(*GetProductsResp)(nil),           // 10: cloud.lianmi.im.order.GetProductsResp
	(*ProductSetSubTypeReq)(nil),      // 11: cloud.lianmi.im.order.ProductSetSubTypeReq
	(*ProductSetSubTypeResp)(nil),     // 12: cloud.lianmi.im.order.ProductSetSubTypeResp
	(global.ProductType)(0),           // 13: cloud.lianmi.im.global.ProductType
	(global.LotteryType)(0),           // 14: cloud.lianmi.im.global.LotteryType
	(msg.AttachType)(0),               // 15: cloud.lianmi.im.msg.AttachType
	(global.OrderState)(0),            // 16: cloud.lianmi.im.global.OrderState
	(global.OrderType)(0),             // 17: cloud.lianmi.im.global.OrderType
	(global.StoreType)(0),             // 18: cloud.lianmi.im.global.StoreType
	(*user.Store)(nil),                // 19: cloud.lianmi.im.user.Store
}
var file_api_proto_order_Product_proto_depIdxs = []int32{
	13, // 0: cloud.lianmi.im.order.Product.productType:type_name -> cloud.lianmi.im.global.ProductType
	14, // 1: cloud.lianmi.im.order.Product.subType:type_name -> cloud.lianmi.im.global.LotteryType
	0,  // 2: cloud.lianmi.im.order.Product.productPics:type_name -> cloud.lianmi.im.order.ProductPic
	15, // 3: cloud.lianmi.im.order.OrderProductBody.attachType:type_name -> cloud.lianmi.im.msg.AttachType
	16, // 4: cloud.lianmi.im.order.OrderProductBody.state:type_name -> cloud.lianmi.im.global.OrderState
	17, // 5: cloud.lianmi.im.order.OrderProductBody.orderType:type_name -> cloud.lianmi.im.global.OrderType
	14, // 6: cloud.lianmi.im.order.OrderProductBody.subType:type_name -> cloud.lianmi.im.global.LotteryType
	13, // 7: cloud.lianmi.im.order.GeneralProduct.productType:type_name -> cloud.lianmi.im.global.ProductType
	14, // 8: cloud.lianmi.im.order.GeneralProduct.subType:type_name -> cloud.lianmi.im.global.LotteryType
	0,  // 9: cloud.lianmi.im.order.GeneralProduct.productPics:type_name -> cloud.lianmi.im.order.ProductPic
	18, // 10: cloud.lianmi.im.order.QueryStoresNearbyReq.storeType:type_name -> cloud.lianmi.im.global.StoreType
	19, // 11: cloud.lianmi.im.order.QueryStoresNearbyResp.stores:type_name -> cloud.lianmi.im.user.Store
	13, // 12: cloud.lianmi.im.order.ProductsListReq.productType:type_name -> cloud.lianmi.im.global.ProductType
	1,  // 13: cloud.lianmi.im.order.ProductsListResp.products:type_name -> cloud.lianmi.im.order.Product
	13, // 14: cloud.lianmi.im.order.GetGeneralProductPageReq.productType:type_name -> cloud.lianmi.im.global.ProductType
	3,  // 15: cloud.lianmi.im.order.GetGeneralProductPageResp.generalproducts:type_name -> cloud.lianmi.im.order.GeneralProduct
	1,  // 16: cloud.lianmi.im.order.GetProductsResp.products:type_name -> cloud.lianmi.im.order.Product
	14, // 17: cloud.lianmi.im.order.ProductSetSubTypeReq.subType:type_name -> cloud.lianmi.im.global.LotteryType
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_api_proto_order_Product_proto_init() }
func file_api_proto_order_Product_proto_init() {
	if File_api_proto_order_Product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_order_Product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderProductBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStoresNearbyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStoresNearbyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGeneralProductPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGeneralProductPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSetSubTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_order_Product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSetSubTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_order_Product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_order_Product_proto_goTypes,
		DependencyIndexes: file_api_proto_order_Product_proto_depIdxs,
		MessageInfos:      file_api_proto_order_Product_proto_msgTypes,
	}.Build()
	File_api_proto_order_Product_proto = out.File
	file_api_proto_order_Product_proto_rawDesc = nil
	file_api_proto_order_Product_proto_goTypes = nil
	file_api_proto_order_Product_proto_depIdxs = nil
}
