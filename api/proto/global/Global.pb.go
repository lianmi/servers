// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: api/proto/global/Global.proto

package global

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//业务模块定义
type BusinessType int32

const (
	BusinessType_Bt_undefined BusinessType = 0  //proto3必须从0开始
	BusinessType_User         BusinessType = 1  //用户模块
	BusinessType_Auth         BusinessType = 2  //鉴权授权模块
	BusinessType_Friends      BusinessType = 3  //好友模块
	BusinessType_Team         BusinessType = 4  //群组模块
	BusinessType_Msg          BusinessType = 5  //消息模块
	BusinessType_Sync         BusinessType = 6  //数据同步模块
	BusinessType_Product      BusinessType = 7  //商品模块
	BusinessType_Broadcast    BusinessType = 8  //广播模块
	BusinessType_Order        BusinessType = 9  //订单模块
	BusinessType_Wallet       BusinessType = 10 //钱包模块
	BusinessType_Log          BusinessType = 11 //日志模块
	BusinessType_Witness      BusinessType = 12 //彩票中心
	BusinessType_Custom       BusinessType = 99 //自定义模块， 用于测试
)

// Enum value maps for BusinessType.
var (
	BusinessType_name = map[int32]string{
		0:  "Bt_undefined",
		1:  "User",
		2:  "Auth",
		3:  "Friends",
		4:  "Team",
		5:  "Msg",
		6:  "Sync",
		7:  "Product",
		8:  "Broadcast",
		9:  "Order",
		10: "Wallet",
		11: "Log",
		12: "Witness",
		99: "Custom",
	}
	BusinessType_value = map[string]int32{
		"Bt_undefined": 0,
		"User":         1,
		"Auth":         2,
		"Friends":      3,
		"Team":         4,
		"Msg":          5,
		"Sync":         6,
		"Product":      7,
		"Broadcast":    8,
		"Order":        9,
		"Wallet":       10,
		"Log":          11,
		"Witness":      12,
		"Custom":       99,
	}
)

func (x BusinessType) Enum() *BusinessType {
	p := new(BusinessType)
	*p = x
	return p
}

func (x BusinessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[0].Descriptor()
}

func (BusinessType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[0]
}

func (x BusinessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessType.Descriptor instead.
func (BusinessType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{0}
}

//授权模块子模块定义
type AuthSubType int32

const (
	AuthSubType_Ast_undefined        AuthSubType = 0  //proto3必须从0开始
	AuthSubType_SignIn               AuthSubType = 1  //取消：登录; 主动
	AuthSubType_SignOut              AuthSubType = 2  //退出登录; 主动
	AuthSubType_MultiLoginEvent      AuthSubType = 3  //多端登录事件 多端登录状态变化的回调, 会收到登录端列表, 以下情况会收到此回调
	AuthSubType_Kick                 AuthSubType = 4  //踢出其他设备; 主动
	AuthSubType_KickedEvent          AuthSubType = 5  //被其他终端踢下线事件
	AuthSubType_AddSlaveDevice       AuthSubType = 6  //增加从设备
	AuthSubType_AuthorizeCode        AuthSubType = 7  //从设备申请授权码
	AuthSubType_RemoveSlaveDevice    AuthSubType = 8  //主设备删除从设备，服务器端发送多终端事件, 同时删除设备记录。
	AuthSubType_SlaveDeviceAuthEvent AuthSubType = 9  //从设备被授权登录后收到的推送
	AuthSubType_GetAllDevices        AuthSubType = 10 //向服务端查询所有主从设备列表
)

// Enum value maps for AuthSubType.
var (
	AuthSubType_name = map[int32]string{
		0:  "Ast_undefined",
		1:  "SignIn",
		2:  "SignOut",
		3:  "MultiLoginEvent",
		4:  "Kick",
		5:  "KickedEvent",
		6:  "AddSlaveDevice",
		7:  "AuthorizeCode",
		8:  "RemoveSlaveDevice",
		9:  "SlaveDeviceAuthEvent",
		10: "GetAllDevices",
	}
	AuthSubType_value = map[string]int32{
		"Ast_undefined":        0,
		"SignIn":               1,
		"SignOut":              2,
		"MultiLoginEvent":      3,
		"Kick":                 4,
		"KickedEvent":          5,
		"AddSlaveDevice":       6,
		"AuthorizeCode":        7,
		"RemoveSlaveDevice":    8,
		"SlaveDeviceAuthEvent": 9,
		"GetAllDevices":        10,
	}
)

func (x AuthSubType) Enum() *AuthSubType {
	p := new(AuthSubType)
	*p = x
	return p
}

func (x AuthSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[1].Descriptor()
}

func (AuthSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[1]
}

func (x AuthSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthSubType.Descriptor instead.
func (AuthSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{1}
}

//用户模块子模块定义
type UserSubType int32

const (
	UserSubType_Ust_undefined                UserSubType = 0 //proto3必须从0开始
	UserSubType_GetUsers                     UserSubType = 1 //*< 根据用户标示返回用户信息
	UserSubType_UpdateUserProfile            UserSubType = 2 //*< 更新当前用户信息
	UserSubType_SyncUserProfileEvent         UserSubType = 3 //*< 登录成功后,用户资料增量更新事件
	UserSubType_SyncUpdateProfileEvent       UserSubType = 4 //*< 用户资料更新事件,同一账号其他终端修改个人资料会触发该事件
	UserSubType_MarkTag                      UserSubType = 5 //*< 用户打标
	UserSubType_SyncMarkTagEvent             UserSubType = 6 //*< 同步其它终端的好友添加、删除标签事件
	UserSubType_SyncTagsEvent                UserSubType = 7 //*< 同步用户标签列表
	UserSubType_NotaryServiceUploadPublickey UserSubType = 8 //*<第三方公证上传Rsa公钥
)

// Enum value maps for UserSubType.
var (
	UserSubType_name = map[int32]string{
		0: "Ust_undefined",
		1: "GetUsers",
		2: "UpdateUserProfile",
		3: "SyncUserProfileEvent",
		4: "SyncUpdateProfileEvent",
		5: "MarkTag",
		6: "SyncMarkTagEvent",
		7: "SyncTagsEvent",
		8: "NotaryServiceUploadPublickey",
	}
	UserSubType_value = map[string]int32{
		"Ust_undefined":                0,
		"GetUsers":                     1,
		"UpdateUserProfile":            2,
		"SyncUserProfileEvent":         3,
		"SyncUpdateProfileEvent":       4,
		"MarkTag":                      5,
		"SyncMarkTagEvent":             6,
		"SyncTagsEvent":                7,
		"NotaryServiceUploadPublickey": 8,
	}
)

func (x UserSubType) Enum() *UserSubType {
	p := new(UserSubType)
	*p = x
	return p
}

func (x UserSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[2].Descriptor()
}

func (UserSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[2]
}

func (x UserSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSubType.Descriptor instead.
func (UserSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{2}
}

//好友模块子模块定义
type FriendSubType int32

const (
	FriendSubType_Fst_undefined         FriendSubType = 0  //proto3必须从0开始
	FriendSubType_FriendRequest         FriendSubType = 1  //*< 好友请求发起与处理(直接添加/发起好友验证/拒绝/通过)
	FriendSubType_FriendChangeEvent     FriendSubType = 2  //*< <已取消>好友关系变更事件
	FriendSubType_SyncFriendsEvent      FriendSubType = 3  //*< 好友列表同步事件
	FriendSubType_SyncFriendUsersEvent  FriendSubType = 4  //*< 好友资料同步事件
	FriendSubType_DeleteFriend          FriendSubType = 5  //*< 删除好友
	FriendSubType_UpdateFriend          FriendSubType = 6  //*< 刷新好友资料
	FriendSubType_SyncUpdateFriendEvent FriendSubType = 7  //*< 主从设备好友资料同步事件
	FriendSubType_GetFriends            FriendSubType = 8  //*< 增量同步好友列表
	FriendSubType_Watching              FriendSubType = 9  //*< 关注商户
	FriendSubType_CancelWatching        FriendSubType = 10 //*< 取消关注商户
	FriendSubType_SyncWatchEvent        FriendSubType = 11 //*< 关注商户同步事件
)

// Enum value maps for FriendSubType.
var (
	FriendSubType_name = map[int32]string{
		0:  "Fst_undefined",
		1:  "FriendRequest",
		2:  "FriendChangeEvent",
		3:  "SyncFriendsEvent",
		4:  "SyncFriendUsersEvent",
		5:  "DeleteFriend",
		6:  "UpdateFriend",
		7:  "SyncUpdateFriendEvent",
		8:  "GetFriends",
		9:  "Watching",
		10: "CancelWatching",
		11: "SyncWatchEvent",
	}
	FriendSubType_value = map[string]int32{
		"Fst_undefined":         0,
		"FriendRequest":         1,
		"FriendChangeEvent":     2,
		"SyncFriendsEvent":      3,
		"SyncFriendUsersEvent":  4,
		"DeleteFriend":          5,
		"UpdateFriend":          6,
		"SyncUpdateFriendEvent": 7,
		"GetFriends":            8,
		"Watching":              9,
		"CancelWatching":        10,
		"SyncWatchEvent":        11,
	}
)

func (x FriendSubType) Enum() *FriendSubType {
	p := new(FriendSubType)
	*p = x
	return p
}

func (x FriendSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[3].Descriptor()
}

func (FriendSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[3]
}

func (x FriendSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendSubType.Descriptor instead.
func (FriendSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{3}
}

//群组模块子模块定义
type TeamSubType int32

const (
	TeamSubType_Gst_undefined      TeamSubType = 0  //proto3必须从0开始
	TeamSubType_CreateTeam         TeamSubType = 1  //*< 1.  创建群组
	TeamSubType_GetTeamMembers     TeamSubType = 2  //*< 2.  获取群组成员
	TeamSubType_GetTeam            TeamSubType = 3  //*< 暂时不开发 3.  查询群组
	TeamSubType_InviteTeamMembers  TeamSubType = 4  //*< 4.  邀请好友加入群组
	TeamSubType_RemoveTeamMembers  TeamSubType = 5  //*< 5.  删除群组成员
	TeamSubType_AcceptTeamInvite   TeamSubType = 6  //*< 6.  接受群邀请
	TeamSubType_RejectTeamInvite   TeamSubType = 7  //*< 7.  拒绝群邀请
	TeamSubType_ApplyTeam          TeamSubType = 8  //*< 8.  申请加群
	TeamSubType_PassTeamApply      TeamSubType = 9  //*< 9.  通过群申请
	TeamSubType_RejectTeamApply    TeamSubType = 10 //*< 10. 拒绝群申请
	TeamSubType_UpdateTeam         TeamSubType = 11 //*< 11. 更新群组信息
	TeamSubType_DismissTeam        TeamSubType = 12 //*< 暂时不开发 12. 解散群组
	TeamSubType_LeaveTeam          TeamSubType = 13 //*< 13. 离开群组
	TeamSubType_AddTeamManagers    TeamSubType = 14 //*< 14. 设置群管理员
	TeamSubType_RemoveTeamManagers TeamSubType = 15 //*< 15. 取消群管理员
	TeamSubType_TransferTeam       TeamSubType = 16 //*< 暂时不开发 16. 转让群
	TeamSubType_SyncMyTeamsEvent   TeamSubType = 17 //*< 17. 同步群组事件
	TeamSubType_MuteTeam           TeamSubType = 18 //*< 18. 修改群禁言模式
	TeamSubType_MuteTeamMember     TeamSubType = 19 //*< 19. 设置群成员禁言
	TeamSubType_SetNotifyType      TeamSubType = 20 //*< 20. 修改群组消息通知方式
	TeamSubType_UpdateMyInfo       TeamSubType = 21 //*< 21. 修改个人群资料
	TeamSubType_UpdateMemberInfo   TeamSubType = 22 //*< 22. 设置群成员资料
	TeamSubType_SyncCreateTeam     TeamSubType = 23 //*< 23. 创建群组多终端同步事件
	TeamSubType_PullTeamMembers    TeamSubType = 24 //*< 24. 根据群成员ID获取群成员信息
	TeamSubType_GetMyTeams         TeamSubType = 25 //*< 25. 增量群组信息
	TeamSubType_CheckTeamInvite    TeamSubType = 26 //*< 26. 管理员审核邀请入群
	TeamSubType_GetMembersPage     TeamSubType = 27 //*< 27. 分页获取群组成员信息
)

// Enum value maps for TeamSubType.
var (
	TeamSubType_name = map[int32]string{
		0:  "Gst_undefined",
		1:  "CreateTeam",
		2:  "GetTeamMembers",
		3:  "GetTeam",
		4:  "InviteTeamMembers",
		5:  "RemoveTeamMembers",
		6:  "AcceptTeamInvite",
		7:  "RejectTeamInvite",
		8:  "ApplyTeam",
		9:  "PassTeamApply",
		10: "RejectTeamApply",
		11: "UpdateTeam",
		12: "DismissTeam",
		13: "LeaveTeam",
		14: "AddTeamManagers",
		15: "RemoveTeamManagers",
		16: "TransferTeam",
		17: "SyncMyTeamsEvent",
		18: "MuteTeam",
		19: "MuteTeamMember",
		20: "SetNotifyType",
		21: "UpdateMyInfo",
		22: "UpdateMemberInfo",
		23: "SyncCreateTeam",
		24: "PullTeamMembers",
		25: "GetMyTeams",
		26: "CheckTeamInvite",
		27: "GetMembersPage",
	}
	TeamSubType_value = map[string]int32{
		"Gst_undefined":      0,
		"CreateTeam":         1,
		"GetTeamMembers":     2,
		"GetTeam":            3,
		"InviteTeamMembers":  4,
		"RemoveTeamMembers":  5,
		"AcceptTeamInvite":   6,
		"RejectTeamInvite":   7,
		"ApplyTeam":          8,
		"PassTeamApply":      9,
		"RejectTeamApply":    10,
		"UpdateTeam":         11,
		"DismissTeam":        12,
		"LeaveTeam":          13,
		"AddTeamManagers":    14,
		"RemoveTeamManagers": 15,
		"TransferTeam":       16,
		"SyncMyTeamsEvent":   17,
		"MuteTeam":           18,
		"MuteTeamMember":     19,
		"SetNotifyType":      20,
		"UpdateMyInfo":       21,
		"UpdateMemberInfo":   22,
		"SyncCreateTeam":     23,
		"PullTeamMembers":    24,
		"GetMyTeams":         25,
		"CheckTeamInvite":    26,
		"GetMembersPage":     27,
	}
)

func (x TeamSubType) Enum() *TeamSubType {
	p := new(TeamSubType)
	*p = x
	return p
}

func (x TeamSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[4].Descriptor()
}

func (TeamSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[4]
}

func (x TeamSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamSubType.Descriptor instead.
func (TeamSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{4}
}

//消息模块子模块定义
type MsgSubType int32

const (
	MsgSubType_Cst_undefined           MsgSubType = 0 //proto3必须从0开始
	MsgSubType_SendMsg                 MsgSubType = 1 //*< 1.  发送消息
	MsgSubType_RecvMsgEvent            MsgSubType = 2 //*< 2.  接收消息事件
	MsgSubType_SyncOfflineSysMsgsEvent MsgSubType = 3 //*< 3.  同步系统离线消息
	//DeleteSessions             = 4;    /**< 4.  <已 >删除会话*/
	MsgSubType_SyncSendMsgEvent       MsgSubType = 5 //*< 5.  发送消息多终端同步事件
	MsgSubType_SendCancelMsg          MsgSubType = 6 //*< 6.  发送撤销消息
	MsgSubType_RecvCancelMsgEvent     MsgSubType = 7 //*< 7.  接收撤销消息事件
	MsgSubType_SyncSendCancelMsgEvent MsgSubType = 8 //*< 8. 主从设备同步发送撤销消息的事件
	//SyncUpdateConversationEvent  = 10;   /**< 10. 同步更新会话 */
	MsgSubType_UpdateConversation MsgSubType = 11 //*< 11. 更新会话
)

// Enum value maps for MsgSubType.
var (
	MsgSubType_name = map[int32]string{
		0:  "Cst_undefined",
		1:  "SendMsg",
		2:  "RecvMsgEvent",
		3:  "SyncOfflineSysMsgsEvent",
		5:  "SyncSendMsgEvent",
		6:  "SendCancelMsg",
		7:  "RecvCancelMsgEvent",
		8:  "SyncSendCancelMsgEvent",
		11: "UpdateConversation",
	}
	MsgSubType_value = map[string]int32{
		"Cst_undefined":           0,
		"SendMsg":                 1,
		"RecvMsgEvent":            2,
		"SyncOfflineSysMsgsEvent": 3,
		"SyncSendMsgEvent":        5,
		"SendCancelMsg":           6,
		"RecvCancelMsgEvent":      7,
		"SyncSendCancelMsgEvent":  8,
		"UpdateConversation":      11,
	}
)

func (x MsgSubType) Enum() *MsgSubType {
	p := new(MsgSubType)
	*p = x
	return p
}

func (x MsgSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[5].Descriptor()
}

func (MsgSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[5]
}

func (x MsgSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgSubType.Descriptor instead.
func (MsgSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{5}
}

//同步模块子模块定义
type SyncSubType int32

const (
	SyncSubType_Syn_undefined SyncSubType = 0 //proto3必须从0开始
	SyncSubType_SyncEvent     SyncSubType = 1 //*< 1. 同步请求
	SyncSubType_SyncDoneEvent SyncSubType = 2 //*< 2. 同步结束事件
)

// Enum value maps for SyncSubType.
var (
	SyncSubType_name = map[int32]string{
		0: "Syn_undefined",
		1: "SyncEvent",
		2: "SyncDoneEvent",
	}
	SyncSubType_value = map[string]int32{
		"Syn_undefined": 0,
		"SyncEvent":     1,
		"SyncDoneEvent": 2,
	}
)

func (x SyncSubType) Enum() *SyncSubType {
	p := new(SyncSubType)
	*p = x
	return p
}

func (x SyncSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[6].Descriptor()
}

func (SyncSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[6]
}

func (x SyncSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncSubType.Descriptor instead.
func (SyncSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{6}
}

//商品模块子模块定义
type ProductSubType int32

const (
	ProductSubType_PST_undefined            ProductSubType = 0 //proto3必须从0开始
	ProductSubType_QueryProducts            ProductSubType = 1 //*< 7-1. 查询某个商户的所有商品信息
	ProductSubType_AddProduct               ProductSubType = 2 //*< 7-2. 商品上架
	ProductSubType_UpdateProduct            ProductSubType = 3 //*< 7-3. 商品编辑更新
	ProductSubType_SoldoutProduct           ProductSubType = 4 //*< 7-4. 商品下架
	ProductSubType_AddProductEvent          ProductSubType = 5 //*< 7-5. 新商品上架事件
	ProductSubType_UpdateProductEvent       ProductSubType = 6 //*< 7-6. 已有商品的编辑更新事件
	ProductSubType_SoldoutProductEvent      ProductSubType = 7 //*< 7-7. 商品下架事件
	ProductSubType_SyncProductEvent         ProductSubType = 8 //*< 7-8. 同步关注的商户商品信息事件
	ProductSubType_SyncGeneralProductsEvent ProductSubType = 9 //*< 7-9 同步通用商品表
)

// Enum value maps for ProductSubType.
var (
	ProductSubType_name = map[int32]string{
		0: "PST_undefined",
		1: "QueryProducts",
		2: "AddProduct",
		3: "UpdateProduct",
		4: "SoldoutProduct",
		5: "AddProductEvent",
		6: "UpdateProductEvent",
		7: "SoldoutProductEvent",
		8: "SyncProductEvent",
		9: "SyncGeneralProductsEvent",
	}
	ProductSubType_value = map[string]int32{
		"PST_undefined":            0,
		"QueryProducts":            1,
		"AddProduct":               2,
		"UpdateProduct":            3,
		"SoldoutProduct":           4,
		"AddProductEvent":          5,
		"UpdateProductEvent":       6,
		"SoldoutProductEvent":      7,
		"SyncProductEvent":         8,
		"SyncGeneralProductsEvent": 9,
	}
)

func (x ProductSubType) Enum() *ProductSubType {
	p := new(ProductSubType)
	*p = x
	return p
}

func (x ProductSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[7].Descriptor()
}

func (ProductSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[7]
}

func (x ProductSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductSubType.Descriptor instead.
func (ProductSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{7}
}

//订单模块子模块定义
type OrderSubType int32

const (
	OrderSubType_OST_undefined             OrderSubType = 0  //proto3必须从0开始
	OrderSubType_RegisterPreKeys           OrderSubType = 1  //*< 已取消 9-1. 商户上传订单DH加密公钥
	OrderSubType_GetPreKeyOrderID          OrderSubType = 2  //*< 9-2. 获取网点OPK公钥及订单ID
	OrderSubType_OrderStateEvent           OrderSubType = 4  //*< 已取消 9-4. 订单状态变化事件
	OrderSubType_ChangeOrderState          OrderSubType = 5  //*< 9-5. 对订单进行状态更改
	OrderSubType_GetPreKeysCount           OrderSubType = 6  //*< 已取消  9-6. 商户获取OPK存量
	OrderSubType_OPKLimitAlert             OrderSubType = 10 //*< 已取消  9-10. 商户OPK存量不足事件
	OrderSubType_PayOrder                  OrderSubType = 11 //*< 9-11. 确认支付订单
	OrderSubType_UploadOrderBodyEvent      OrderSubType = 13 //*< 9-13. 买家将订单body加密发送给第三方公证
	OrderSubType_GetNotaryServicePublickey OrderSubType = 14 //*< 9-14. 买家获取商户对应的第三方公证的公钥
)

// Enum value maps for OrderSubType.
var (
	OrderSubType_name = map[int32]string{
		0:  "OST_undefined",
		1:  "RegisterPreKeys",
		2:  "GetPreKeyOrderID",
		4:  "OrderStateEvent",
		5:  "ChangeOrderState",
		6:  "GetPreKeysCount",
		10: "OPKLimitAlert",
		11: "PayOrder",
		13: "UploadOrderBodyEvent",
		14: "GetNotaryServicePublickey",
	}
	OrderSubType_value = map[string]int32{
		"OST_undefined":             0,
		"RegisterPreKeys":           1,
		"GetPreKeyOrderID":          2,
		"OrderStateEvent":           4,
		"ChangeOrderState":          5,
		"GetPreKeysCount":           6,
		"OPKLimitAlert":             10,
		"PayOrder":                  11,
		"UploadOrderBodyEvent":      13,
		"GetNotaryServicePublickey": 14,
	}
)

func (x OrderSubType) Enum() *OrderSubType {
	p := new(OrderSubType)
	*p = x
	return p
}

func (x OrderSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[8].Descriptor()
}

func (OrderSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[8]
}

func (x OrderSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSubType.Descriptor instead.
func (OrderSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{8}
}

//钱包模块子模块定义
type WalletSubType int32

const (
	WalletSubType_WST_undefined  WalletSubType = 0 //proto3必须从0开始
	WalletSubType_RegisterWallet WalletSubType = 1 //*< 10-1 钱包账号注册
	//Deposit                   =  2;   /**< 取消 10-2 充值*/
	WalletSubType_PreTransfer               WalletSubType = 3  //*< 10-3 发起转账
	WalletSubType_ConfirmTransfer           WalletSubType = 4  //*< 10-4 确认转账
	WalletSubType_Balance                   WalletSubType = 5  //*< 10-5 查询账号余额
	WalletSubType_PreWithDraw               WalletSubType = 6  //*< 10-6 发起提现预审核
	WalletSubType_WithDraw                  WalletSubType = 7  //*< 10-7 确认提现
	WalletSubType_WithDrawBankCompleteEvent WalletSubType = 8  //*< 10-8 提现银行转账通知事件
	WalletSubType_SyncCollectionHistory     WalletSubType = 9  //*< 10-9 同步收款历史
	WalletSubType_SyncDepositHistory        WalletSubType = 10 //*< 10-10 同步充值历史
	WalletSubType_SyncWithdrawHistory       WalletSubType = 11 //*< 10-11 同步提现历史
	WalletSubType_SyncTransferHistory       WalletSubType = 12 //*< 10-12 同步转账历史
	WalletSubType_UserSignIn                WalletSubType = 13 //*< 10-13 签到
	WalletSubType_TxHashInfo                WalletSubType = 14 //*< 10-14 查询交易哈希详情
	WalletSubType_EthReceivedEvent          WalletSubType = 15 //*< 10-15 ETH奖励到账通知事件
	WalletSubType_LNMCReceivedEvent         WalletSubType = 16 //*< 10-16 连米币到账通知事件
)

// Enum value maps for WalletSubType.
var (
	WalletSubType_name = map[int32]string{
		0:  "WST_undefined",
		1:  "RegisterWallet",
		3:  "PreTransfer",
		4:  "ConfirmTransfer",
		5:  "Balance",
		6:  "PreWithDraw",
		7:  "WithDraw",
		8:  "WithDrawBankCompleteEvent",
		9:  "SyncCollectionHistory",
		10: "SyncDepositHistory",
		11: "SyncWithdrawHistory",
		12: "SyncTransferHistory",
		13: "UserSignIn",
		14: "TxHashInfo",
		15: "EthReceivedEvent",
		16: "LNMCReceivedEvent",
	}
	WalletSubType_value = map[string]int32{
		"WST_undefined":             0,
		"RegisterWallet":            1,
		"PreTransfer":               3,
		"ConfirmTransfer":           4,
		"Balance":                   5,
		"PreWithDraw":               6,
		"WithDraw":                  7,
		"WithDrawBankCompleteEvent": 8,
		"SyncCollectionHistory":     9,
		"SyncDepositHistory":        10,
		"SyncWithdrawHistory":       11,
		"SyncTransferHistory":       12,
		"UserSignIn":                13,
		"TxHashInfo":                14,
		"EthReceivedEvent":          15,
		"LNMCReceivedEvent":         16,
	}
)

func (x WalletSubType) Enum() *WalletSubType {
	p := new(WalletSubType)
	*p = x
	return p
}

func (x WalletSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalletSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[9].Descriptor()
}

func (WalletSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[9]
}

func (x WalletSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalletSubType.Descriptor instead.
func (WalletSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{9}
}

//日志模块子模块定义
type LogSubType int32

const (
	LogSubType_LST_undefined LogSubType = 0 //proto3必须从0开始
	LogSubType_SendLog       LogSubType = 1 //*< 11-1 日志上报
)

// Enum value maps for LogSubType.
var (
	LogSubType_name = map[int32]string{
		0: "LST_undefined",
		1: "SendLog",
	}
	LogSubType_value = map[string]int32{
		"LST_undefined": 0,
		"SendLog":       1,
	}
)

func (x LogSubType) Enum() *LogSubType {
	p := new(LogSubType)
	*p = x
	return p
}

func (x LogSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[10].Descriptor()
}

func (LogSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[10]
}

func (x LogSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogSubType.Descriptor instead.
func (LogSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{10}
}

//彩票中心模块子模块定义
type WitnessSubType int32

const (
	WitnessSubType_WIT_undefined WitnessSubType = 0 //proto3必须从0开始
	WitnessSubType_UpChain       WitnessSubType = 1 //*< 12-1 订单上链通知
	WitnessSubType_UpChainDone   WitnessSubType = 2 //*< 12-2 订单上链完成
)

// Enum value maps for WitnessSubType.
var (
	WitnessSubType_name = map[int32]string{
		0: "WIT_undefined",
		1: "UpChain",
		2: "UpChainDone",
	}
	WitnessSubType_value = map[string]int32{
		"WIT_undefined": 0,
		"UpChain":       1,
		"UpChainDone":   2,
	}
)

func (x WitnessSubType) Enum() *WitnessSubType {
	p := new(WitnessSubType)
	*p = x
	return p
}

func (x WitnessSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WitnessSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[11].Descriptor()
}

func (WitnessSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[11]
}

func (x WitnessSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WitnessSubType.Descriptor instead.
func (WitnessSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{11}
}

//订单状态枚举：
type OrderState int32

const (
	OrderState_OS_Undefined    OrderState = 0  //proto3必须从0开始
	OrderState_OS_Prepare      OrderState = 1  //*< 预审核状态
	OrderState_OS_SendOK       OrderState = 2  //*< 订单发送成功
	OrderState_OS_RecvOK       OrderState = 3  //*< 订单送达成功
	OrderState_OS_Taked        OrderState = 4  //*< 已接单
	OrderState_OS_Done         OrderState = 5  //*< 完成订单
	OrderState_OS_Cancel       OrderState = 6  //*< 取消订单 商户同意撤单
	OrderState_OS_Processing   OrderState = 7  //*< 订单处理中，一般用于商户，安抚下单的
	OrderState_OS_Confirm      OrderState = 8  //*< 确认收货
	OrderState_OS_ApplyCancel  OrderState = 9  //*< 申请撤单
	OrderState_OS_AttachChange OrderState = 10 //*< 订单内容发生更改
	OrderState_OS_Paying       OrderState = 11 //*< 支付中
	OrderState_OS_Overdue      OrderState = 12 //*< 已逾期
	OrderState_OS_Refuse       OrderState = 13 //*< 已拒单， 跟已接单是相反的操作
	OrderState_OS_IsPayed      OrderState = 14 //*< 已支付， 支付成功
	OrderState_OS_Urge         OrderState = 15 //*< 买家催单, 商户可以回复7
	OrderState_OS_Expedited    OrderState = 16 //*< 加急订单, 排在首位
	OrderState_OS_UpChained    OrderState = 17 //*< 订单上链成功
	OrderState_OS_Prizeed      OrderState = 18 //*< 已兑奖 商户端发起
)

// Enum value maps for OrderState.
var (
	OrderState_name = map[int32]string{
		0:  "OS_Undefined",
		1:  "OS_Prepare",
		2:  "OS_SendOK",
		3:  "OS_RecvOK",
		4:  "OS_Taked",
		5:  "OS_Done",
		6:  "OS_Cancel",
		7:  "OS_Processing",
		8:  "OS_Confirm",
		9:  "OS_ApplyCancel",
		10: "OS_AttachChange",
		11: "OS_Paying",
		12: "OS_Overdue",
		13: "OS_Refuse",
		14: "OS_IsPayed",
		15: "OS_Urge",
		16: "OS_Expedited",
		17: "OS_UpChained",
		18: "OS_Prizeed",
	}
	OrderState_value = map[string]int32{
		"OS_Undefined":    0,
		"OS_Prepare":      1,
		"OS_SendOK":       2,
		"OS_RecvOK":       3,
		"OS_Taked":        4,
		"OS_Done":         5,
		"OS_Cancel":       6,
		"OS_Processing":   7,
		"OS_Confirm":      8,
		"OS_ApplyCancel":  9,
		"OS_AttachChange": 10,
		"OS_Paying":       11,
		"OS_Overdue":      12,
		"OS_Refuse":       13,
		"OS_IsPayed":      14,
		"OS_Urge":         15,
		"OS_Expedited":    16,
		"OS_UpChained":    17,
		"OS_Prizeed":      18,
	}
)

func (x OrderState) Enum() *OrderState {
	p := new(OrderState)
	*p = x
	return p
}

func (x OrderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[12].Descriptor()
}

func (OrderState) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[12]
}

func (x OrderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderState.Descriptor instead.
func (OrderState) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{12}
}

type StoreType int32

const (
	StoreType_ST_Undefined    StoreType = 0  //proto3必须从0开始
	StoreType_ST_FreshProduct StoreType = 1  //*< 生鲜
	StoreType_ST_Meat         StoreType = 2  //*< 肉类
	StoreType_ST_Fruits       StoreType = 3  //*< 水果蔬菜类
	StoreType_ST_GrainOil     StoreType = 4  //*< 粮油类
	StoreType_ST_Delicatessen StoreType = 5  //*< 熟食类
	StoreType_ST_Bakery       StoreType = 6  //*< 面包糕点类
	StoreType_ST_GroceryStore StoreType = 7  //*< 生活五金用品类
	StoreType_ST_HouseKeeping StoreType = 8  //*< 家政
	StoreType_ST_Lottery      StoreType = 9  //*< 彩票
	StoreType_ST_Carry        StoreType = 10 //*< 搬运
	StoreType_ST_Maintenance  StoreType = 11 //*< 维修
	StoreType_ST_Services     StoreType = 12 //*< 服务行业
	StoreType_ST_Others       StoreType = 13 //*<其它
)

// Enum value maps for StoreType.
var (
	StoreType_name = map[int32]string{
		0:  "ST_Undefined",
		1:  "ST_FreshProduct",
		2:  "ST_Meat",
		3:  "ST_Fruits",
		4:  "ST_GrainOil",
		5:  "ST_Delicatessen",
		6:  "ST_Bakery",
		7:  "ST_GroceryStore",
		8:  "ST_HouseKeeping",
		9:  "ST_Lottery",
		10: "ST_Carry",
		11: "ST_Maintenance",
		12: "ST_Services",
		13: "ST_Others",
	}
	StoreType_value = map[string]int32{
		"ST_Undefined":    0,
		"ST_FreshProduct": 1,
		"ST_Meat":         2,
		"ST_Fruits":       3,
		"ST_GrainOil":     4,
		"ST_Delicatessen": 5,
		"ST_Bakery":       6,
		"ST_GroceryStore": 7,
		"ST_HouseKeeping": 8,
		"ST_Lottery":      9,
		"ST_Carry":        10,
		"ST_Maintenance":  11,
		"ST_Services":     12,
		"ST_Others":       13,
	}
)

func (x StoreType) Enum() *StoreType {
	p := new(StoreType)
	*p = x
	return p
}

func (x StoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[13].Descriptor()
}

func (StoreType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[13]
}

func (x StoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoreType.Descriptor instead.
func (StoreType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{13}
}

//商品类型
type ProductType int32

const (
	ProductType_OT_Undefined    ProductType = 0  //proto3必须从0开始
	ProductType_OT_FreshProduct ProductType = 1  //*< 生鲜产品
	ProductType_OT_Meat         ProductType = 2  //*< 肉类
	ProductType_OT_Fruits       ProductType = 3  //*< 水果蔬菜类
	ProductType_OT_GrainOil     ProductType = 4  //*< 粮油类
	ProductType_OT_Delicatessen ProductType = 5  //*< 熟食类
	ProductType_OT_Bakery       ProductType = 6  //*< 面包糕饼类
	ProductType_OT_GroceryStore ProductType = 7  //*< 生活清洁用品类
	ProductType_OT_HouseKeeping ProductType = 8  //*< 家政
	ProductType_OT_Lottery      ProductType = 9  //*< 彩票
	ProductType_OT_Carry        ProductType = 10 //*< 搬运
	ProductType_OT_Maintenance  ProductType = 11 //*< 维修
	ProductType_OT_Services     ProductType = 12 //*< 服务行业
	ProductType_OT_Others       ProductType = 13 //*<其它
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0:  "OT_Undefined",
		1:  "OT_FreshProduct",
		2:  "OT_Meat",
		3:  "OT_Fruits",
		4:  "OT_GrainOil",
		5:  "OT_Delicatessen",
		6:  "OT_Bakery",
		7:  "OT_GroceryStore",
		8:  "OT_HouseKeeping",
		9:  "OT_Lottery",
		10: "OT_Carry",
		11: "OT_Maintenance",
		12: "OT_Services",
		13: "OT_Others",
	}
	ProductType_value = map[string]int32{
		"OT_Undefined":    0,
		"OT_FreshProduct": 1,
		"OT_Meat":         2,
		"OT_Fruits":       3,
		"OT_GrainOil":     4,
		"OT_Delicatessen": 5,
		"OT_Bakery":       6,
		"OT_GroceryStore": 7,
		"OT_HouseKeeping": 8,
		"OT_Lottery":      9,
		"OT_Carry":        10,
		"OT_Maintenance":  11,
		"OT_Services":     12,
		"OT_Others":       13,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[14].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[14]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{14}
}

//商品子类型的彩票枚举 1- 双色球  2- 大乐透,  3- 福彩3d
type LotteryType int32

const (
	LotteryType_LT_Undefined   LotteryType = 0 //proto3必须从0开始
	LotteryType_LT_Shuangseqiu LotteryType = 1 //*< 双色球
	LotteryType_LT_Daletou     LotteryType = 2 //*< 大乐透
	LotteryType_LT_Fucai3d     LotteryType = 3 //*< 福彩3d
)

// Enum value maps for LotteryType.
var (
	LotteryType_name = map[int32]string{
		0: "LT_Undefined",
		1: "LT_Shuangseqiu",
		2: "LT_Daletou",
		3: "LT_Fucai3d",
	}
	LotteryType_value = map[string]int32{
		"LT_Undefined":   0,
		"LT_Shuangseqiu": 1,
		"LT_Daletou":     2,
		"LT_Fucai3d":     3,
	}
)

func (x LotteryType) Enum() *LotteryType {
	p := new(LotteryType)
	*p = x
	return p
}

func (x LotteryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LotteryType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[15].Descriptor()
}

func (LotteryType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[15]
}

func (x LotteryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LotteryType.Descriptor instead.
func (LotteryType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{15}
}

//商品上下架状态
type OnSellState int32

const (
	OnSellState_OnSellinit OnSellState = 0 //未上架
	OnSellState_OnSelling  OnSellState = 1 //上架中
	OnSellState_OnSellOut  OnSellState = 2 //已下架
)

// Enum value maps for OnSellState.
var (
	OnSellState_name = map[int32]string{
		0: "OnSellinit",
		1: "OnSelling",
		2: "OnSellOut",
	}
	OnSellState_value = map[string]int32{
		"OnSellinit": 0,
		"OnSelling":  1,
		"OnSellOut":  2,
	}
)

func (x OnSellState) Enum() *OnSellState {
	p := new(OnSellState)
	*p = x
	return p
}

func (x OnSellState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnSellState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[16].Descriptor()
}

func (OnSellState) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[16]
}

func (x OnSellState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnSellState.Descriptor instead.
func (OnSellState) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{16}
}

//交易类型枚举(钱包资产的收支)：
type TransactionType int32

const (
	TransactionType_DT_Undefined TransactionType = 0 //proto3必须从0开始
	TransactionType_DT_Deposit   TransactionType = 1 //*< 充值
	TransactionType_DT_WithDraw  TransactionType = 2 //*< 提现
	TransactionType_DT_Transfer  TransactionType = 3 //*< 支付
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "DT_Undefined",
		1: "DT_Deposit",
		2: "DT_WithDraw",
		3: "DT_Transfer",
	}
	TransactionType_value = map[string]int32{
		"DT_Undefined": 0,
		"DT_Deposit":   1,
		"DT_WithDraw":  2,
		"DT_Transfer":  3,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[17].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[17]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{17}
}

//订单类型, 类型的不同决定着不同的交互
type OrderType int32

const (
	OrderType_ORT_Undefined OrderType = 0 //proto3必须从0开始
	OrderType_ORT_Normal    OrderType = 1 //正常类型
	OrderType_ORT_Grabbing  OrderType = 2 //任务抢单类型
	OrderType_ORT_Walking   OrderType = 3 //竞猜类
	OrderType_ORT_Server    OrderType = 4 //服务端发起的收费
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORT_Undefined",
		1: "ORT_Normal",
		2: "ORT_Grabbing",
		3: "ORT_Walking",
		4: "ORT_Server",
	}
	OrderType_value = map[string]int32{
		"ORT_Undefined": 0,
		"ORT_Normal":    1,
		"ORT_Grabbing":  2,
		"ORT_Walking":   3,
		"ORT_Server":    4,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[18].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[18]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{18}
}

//支付接口类型
type ThirdPartyPaymentType int32

const (
	ThirdPartyPaymentType_TPPT_Undefined ThirdPartyPaymentType = 0 //proto3必须从0开始
	ThirdPartyPaymentType_TPPT_AliPay    ThirdPartyPaymentType = 1 //支付宝
	ThirdPartyPaymentType_TPPT_WeChatPay ThirdPartyPaymentType = 2 //微信
	ThirdPartyPaymentType_TPPT_Bank      ThirdPartyPaymentType = 3 //银行卡
)

// Enum value maps for ThirdPartyPaymentType.
var (
	ThirdPartyPaymentType_name = map[int32]string{
		0: "TPPT_Undefined",
		1: "TPPT_AliPay",
		2: "TPPT_WeChatPay",
		3: "TPPT_Bank",
	}
	ThirdPartyPaymentType_value = map[string]int32{
		"TPPT_Undefined": 0,
		"TPPT_AliPay":    1,
		"TPPT_WeChatPay": 2,
		"TPPT_Bank":      3,
	}
)

func (x ThirdPartyPaymentType) Enum() *ThirdPartyPaymentType {
	p := new(ThirdPartyPaymentType)
	*p = x
	return p
}

func (x ThirdPartyPaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThirdPartyPaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[19].Descriptor()
}

func (ThirdPartyPaymentType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[19]
}

func (x ThirdPartyPaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThirdPartyPaymentType.Descriptor instead.
func (ThirdPartyPaymentType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{19}
}

//充值金额枚举
type DepositRecharge int32

const (
	DepositRecharge_DR_Undefined DepositRecharge = 0 //proto3必须从0开始
	DepositRecharge_DR_100       DepositRecharge = 1 //100元
	DepositRecharge_DR_200       DepositRecharge = 2 //200元
	DepositRecharge_DR_300       DepositRecharge = 3 //300元
	DepositRecharge_DR_500       DepositRecharge = 4 //500元
	DepositRecharge_DR_1000      DepositRecharge = 5 //1000元
	DepositRecharge_DR_3000      DepositRecharge = 6 //3000元
	DepositRecharge_DR_10000     DepositRecharge = 7 //10000元
)

// Enum value maps for DepositRecharge.
var (
	DepositRecharge_name = map[int32]string{
		0: "DR_Undefined",
		1: "DR_100",
		2: "DR_200",
		3: "DR_300",
		4: "DR_500",
		5: "DR_1000",
		6: "DR_3000",
		7: "DR_10000",
	}
	DepositRecharge_value = map[string]int32{
		"DR_Undefined": 0,
		"DR_100":       1,
		"DR_200":       2,
		"DR_300":       3,
		"DR_500":       4,
		"DR_1000":      5,
		"DR_3000":      6,
		"DR_10000":     7,
	}
)

func (x DepositRecharge) Enum() *DepositRecharge {
	p := new(DepositRecharge)
	*p = x
	return p
}

func (x DepositRecharge) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepositRecharge) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[20].Descriptor()
}

func (DepositRecharge) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[20]
}

func (x DepositRecharge) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepositRecharge.Descriptor instead.
func (DepositRecharge) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{20}
}

//客服技术类型枚举
type CustomerServiceType int32

const (
	CustomerServiceType_CS_Undefined         CustomerServiceType = 0 //proto3必须从0开始
	CustomerServiceType_CS_CustomerService   CustomerServiceType = 1 //客服
	CustomerServiceType_CS_TechnologyService CustomerServiceType = 2 //技术支持
)

// Enum value maps for CustomerServiceType.
var (
	CustomerServiceType_name = map[int32]string{
		0: "CS_Undefined",
		1: "CS_CustomerService",
		2: "CS_TechnologyService",
	}
	CustomerServiceType_value = map[string]int32{
		"CS_Undefined":         0,
		"CS_CustomerService":   1,
		"CS_TechnologyService": 2,
	}
)

func (x CustomerServiceType) Enum() *CustomerServiceType {
	p := new(CustomerServiceType)
	*p = x
	return p
}

func (x CustomerServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[21].Descriptor()
}

func (CustomerServiceType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[21]
}

func (x CustomerServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerServiceType.Descriptor instead.
func (CustomerServiceType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{21}
}

//会员时间类型，有包年，包季，包月
type VipUserPayType int32

const (
	VipUserPayType_VIP_Undefined VipUserPayType = 0 //proto3必须从0开始
	VipUserPayType_VIP_Year      VipUserPayType = 1 //包年
	VipUserPayType_VIP_Season    VipUserPayType = 2 //包季
	VipUserPayType_VIP_Month     VipUserPayType = 3 //包月
	VipUserPayType_VIP_Week      VipUserPayType = 4 //包周，体验卡
)

// Enum value maps for VipUserPayType.
var (
	VipUserPayType_name = map[int32]string{
		0: "VIP_Undefined",
		1: "VIP_Year",
		2: "VIP_Season",
		3: "VIP_Month",
		4: "VIP_Week",
	}
	VipUserPayType_value = map[string]int32{
		"VIP_Undefined": 0,
		"VIP_Year":      1,
		"VIP_Season":    2,
		"VIP_Month":     3,
		"VIP_Week":      4,
	}
)

func (x VipUserPayType) Enum() *VipUserPayType {
	p := new(VipUserPayType)
	*p = x
	return p
}

func (x VipUserPayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VipUserPayType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[22].Descriptor()
}

func (VipUserPayType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[22]
}

func (x VipUserPayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VipUserPayType.Descriptor instead.
func (VipUserPayType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{22}
}

var File_api_proto_global_Global_proto protoreflect.FileDescriptor

var file_api_proto_global_Global_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2a, 0xb3, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x74, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x65, 0x61, 0x6d, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x10, 0x05, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x09, 0x12,
	0x0a, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x10,
	0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x63, 0x2a, 0xd4, 0x01,
	0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x4b, 0x69, 0x63, 0x6b, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x69, 0x63, 0x6b,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x53, 0x6c, 0x61, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x07,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x6c, 0x61, 0x76, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x09, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x10, 0x0a, 0x2a, 0xd3, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x6f, 0x74, 0x61,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x10, 0x08, 0x2a, 0x81, 0x02, 0x0a, 0x0d, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79, 0x6e,
	0x63, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x79,
	0x6e, 0x63, 0x57, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0b, 0x2a, 0xa6,
	0x04, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x61, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x09, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x65,
	0x61, 0x6d, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x10, 0x0f,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x14, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x15, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x75, 0x6c,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x10, 0x18, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x10, 0x19, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x50, 0x61, 0x67, 0x65, 0x10, 0x1b, 0x2a, 0xd0, 0x01, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x73, 0x74, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x76, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x2a, 0x42, 0x0a, 0x0b, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x79, 0x6e,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x79, 0x6e, 0x63, 0x44, 0x6f, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x2a, 0xe7,
	0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x53, 0x54, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6f,
	0x6c, 0x64, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x79,
	0x6e, 0x63, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x2a, 0xe6, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x53, 0x54,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x4b, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x61,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x10,
	0x0e, 0x2a, 0xd9, 0x02, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x53, 0x54, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x0a, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x0c,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x10, 0x0d,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x0e,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4e, 0x4d, 0x43, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x10, 0x2a, 0x2c, 0x0a,
	0x0a, 0x4c, 0x6f, 0x67, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x53, 0x54, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x10, 0x01, 0x2a, 0x41, 0x0a, 0x0e, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x57, 0x49, 0x54, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x2a, 0xc1,
	0x02, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x53, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x53, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x4f, 0x53, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x4f, 0x53, 0x5f, 0x52, 0x65, 0x63, 0x76, 0x4f, 0x4b, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x53, 0x5f, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x53, 0x5f, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x53, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x53, 0x5f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x53,
	0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x53,
	0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x09, 0x12, 0x13,
	0x0a, 0x0f, 0x4f, 0x53, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x53, 0x5f, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x53, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65,
	0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x53, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x10,
	0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x53, 0x5f, 0x49, 0x73, 0x50, 0x61, 0x79, 0x65, 0x64, 0x10,
	0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x53, 0x5f, 0x55, 0x72, 0x67, 0x65, 0x10, 0x0f, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x53, 0x5f, 0x45, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x10, 0x10,
	0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x53, 0x5f, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x53, 0x5f, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x65, 0x64,
	0x10, 0x12, 0x2a, 0xff, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x5f, 0x46, 0x72, 0x65, 0x73, 0x68, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x5f, 0x4d, 0x65,
	0x61, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x5f, 0x46, 0x72, 0x75, 0x69, 0x74,
	0x73, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x5f, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x4f,
	0x69, 0x6c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x5f, 0x44, 0x65, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x5f,
	0x42, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x5f, 0x47,
	0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x5f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67,
	0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x5f, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x5f, 0x43, 0x61, 0x72, 0x72, 0x79, 0x10, 0x0a,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x5f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x5f, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x73, 0x10, 0x0d, 0x2a, 0x81, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x54, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x54, 0x5f, 0x46, 0x72, 0x65,
	0x73, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x54, 0x5f, 0x4d, 0x65, 0x61, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x54, 0x5f, 0x46,
	0x72, 0x75, 0x69, 0x74, 0x73, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x5f, 0x47, 0x72,
	0x61, 0x69, 0x6e, 0x4f, 0x69, 0x6c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x54, 0x5f, 0x44,
	0x65, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x54, 0x5f, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x54, 0x5f, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x54, 0x5f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4b, 0x65, 0x65,
	0x70, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x54, 0x5f, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x54, 0x5f, 0x43, 0x61, 0x72,
	0x72, 0x79, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x54, 0x5f, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x54, 0x5f,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x10, 0x0d, 0x2a, 0x53, 0x0a, 0x0b, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x54, 0x5f, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x54, 0x5f,
	0x53, 0x68, 0x75, 0x61, 0x6e, 0x67, 0x73, 0x65, 0x71, 0x69, 0x75, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x54, 0x5f, 0x44, 0x61, 0x6c, 0x65, 0x74, 0x6f, 0x75, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x54, 0x5f, 0x46, 0x75, 0x63, 0x61, 0x69, 0x33, 0x64, 0x10, 0x03, 0x2a, 0x3b, 0x0a,
	0x0b, 0x4f, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4f, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f,
	0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x10, 0x02, 0x2a, 0x55, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x54, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x54, 0x5f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x77, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10,
	0x03, 0x2a, 0x61, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x54, 0x5f, 0x47, 0x72, 0x61, 0x62, 0x62, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x61, 0x6c, 0x6b, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x10, 0x04, 0x2a, 0x5f, 0x0a, 0x15, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x50, 0x50, 0x54, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x50, 0x50, 0x54, 0x5f, 0x41, 0x6c, 0x69, 0x50, 0x61, 0x79,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x50, 0x50, 0x54, 0x5f, 0x57, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x79, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x50, 0x50, 0x54, 0x5f, 0x42,
	0x61, 0x6e, 0x6b, 0x10, 0x03, 0x2a, 0x7b, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x52, 0x5f, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x52,
	0x5f, 0x31, 0x30, 0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x52, 0x5f, 0x32, 0x30, 0x30,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x52, 0x5f, 0x33, 0x30, 0x30, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x52, 0x5f, 0x35, 0x30, 0x30, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x52,
	0x5f, 0x31, 0x30, 0x30, 0x30, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x52, 0x5f, 0x33, 0x30,
	0x30, 0x30, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x30,
	0x10, 0x07, 0x2a, 0x59, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x53, 0x5f,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x53, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x53, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x02, 0x2a, 0x5e, 0x0a,
	0x0e, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x56, 0x49, 0x50, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x49, 0x50, 0x5f, 0x59, 0x65, 0x61, 0x72, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x50, 0x5f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x50, 0x5f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x56, 0x49, 0x50, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x04, 0x42, 0x2c, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x61, 0x6e,
	0x6d, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_proto_global_Global_proto_rawDescOnce sync.Once
	file_api_proto_global_Global_proto_rawDescData = file_api_proto_global_Global_proto_rawDesc
)

func file_api_proto_global_Global_proto_rawDescGZIP() []byte {
	file_api_proto_global_Global_proto_rawDescOnce.Do(func() {
		file_api_proto_global_Global_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_global_Global_proto_rawDescData)
	})
	return file_api_proto_global_Global_proto_rawDescData
}

var file_api_proto_global_Global_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_api_proto_global_Global_proto_goTypes = []interface{}{
	(BusinessType)(0),          // 0: cloud.lianmi.im.global.BusinessType
	(AuthSubType)(0),           // 1: cloud.lianmi.im.global.AuthSubType
	(UserSubType)(0),           // 2: cloud.lianmi.im.global.UserSubType
	(FriendSubType)(0),         // 3: cloud.lianmi.im.global.FriendSubType
	(TeamSubType)(0),           // 4: cloud.lianmi.im.global.TeamSubType
	(MsgSubType)(0),            // 5: cloud.lianmi.im.global.MsgSubType
	(SyncSubType)(0),           // 6: cloud.lianmi.im.global.SyncSubType
	(ProductSubType)(0),        // 7: cloud.lianmi.im.global.ProductSubType
	(OrderSubType)(0),          // 8: cloud.lianmi.im.global.OrderSubType
	(WalletSubType)(0),         // 9: cloud.lianmi.im.global.WalletSubType
	(LogSubType)(0),            // 10: cloud.lianmi.im.global.LogSubType
	(WitnessSubType)(0),        // 11: cloud.lianmi.im.global.WitnessSubType
	(OrderState)(0),            // 12: cloud.lianmi.im.global.OrderState
	(StoreType)(0),             // 13: cloud.lianmi.im.global.StoreType
	(ProductType)(0),           // 14: cloud.lianmi.im.global.ProductType
	(LotteryType)(0),           // 15: cloud.lianmi.im.global.LotteryType
	(OnSellState)(0),           // 16: cloud.lianmi.im.global.OnSellState
	(TransactionType)(0),       // 17: cloud.lianmi.im.global.TransactionType
	(OrderType)(0),             // 18: cloud.lianmi.im.global.OrderType
	(ThirdPartyPaymentType)(0), // 19: cloud.lianmi.im.global.ThirdPartyPaymentType
	(DepositRecharge)(0),       // 20: cloud.lianmi.im.global.DepositRecharge
	(CustomerServiceType)(0),   // 21: cloud.lianmi.im.global.CustomerServiceType
	(VipUserPayType)(0),        // 22: cloud.lianmi.im.global.VipUserPayType
}
var file_api_proto_global_Global_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_proto_global_Global_proto_init() }
func file_api_proto_global_Global_proto_init() {
	if File_api_proto_global_Global_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_global_Global_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_global_Global_proto_goTypes,
		DependencyIndexes: file_api_proto_global_Global_proto_depIdxs,
		EnumInfos:         file_api_proto_global_Global_proto_enumTypes,
	}.Build()
	File_api_proto_global_Global_proto = out.File
	file_api_proto_global_Global_proto_rawDesc = nil
	file_api_proto_global_Global_proto_goTypes = nil
	file_api_proto_global_Global_proto_depIdxs = nil
}
