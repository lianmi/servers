// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: api/proto/global/Global.proto

package global

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//业务模块定义
type BusinessType int32

const (
	BusinessType_Bt_undefined BusinessType = 0 //proto3必须从0开始
	BusinessType_Users        BusinessType = 1 //用户模块
	BusinessType_Auth         BusinessType = 2 //鉴权授权模块
	BusinessType_Friends      BusinessType = 3 //好友模块
	BusinessType_Group        BusinessType = 4 //群组模块
	BusinessType_Chat         BusinessType = 5 //消息模块
	BusinessType_Sync         BusinessType = 6 //数据同步模块
)

// Enum value maps for BusinessType.
var (
	BusinessType_name = map[int32]string{
		0: "Bt_undefined",
		1: "Users",
		2: "Auth",
		3: "Friends",
		4: "Group",
		5: "Chat",
		6: "Sync",
	}
	BusinessType_value = map[string]int32{
		"Bt_undefined": 0,
		"Users":        1,
		"Auth":         2,
		"Friends":      3,
		"Group":        4,
		"Chat":         5,
		"Sync":         6,
	}
)

func (x BusinessType) Enum() *BusinessType {
	p := new(BusinessType)
	*p = x
	return p
}

func (x BusinessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[0].Descriptor()
}

func (BusinessType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[0]
}

func (x BusinessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessType.Descriptor instead.
func (BusinessType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{0}
}

//授权模块子模块定义
type AuthSubType int32

const (
	AuthSubType_Ast_undefined  AuthSubType = 0 //proto3必须从0开始
	AuthSubType_SignIn         AuthSubType = 1 //*< 登录; 主动
	AuthSubType_SignOut        AuthSubType = 2 //*< 退出登录; 主动
	AuthSubType_Kick           AuthSubType = 3 //*< 踢出其他设备; 主动
	AuthSubType_KickedEvent    AuthSubType = 4 //*< 被其他终端踢下线事件; OnPush里处理
	AuthSubType_MultiPortLogin AuthSubType = 5 //*< 多端登录事件
)

// Enum value maps for AuthSubType.
var (
	AuthSubType_name = map[int32]string{
		0: "Ast_undefined",
		1: "SignIn",
		2: "SignOut",
		3: "Kick",
		4: "KickedEvent",
		5: "MultiPortLogin",
	}
	AuthSubType_value = map[string]int32{
		"Ast_undefined":  0,
		"SignIn":         1,
		"SignOut":        2,
		"Kick":           3,
		"KickedEvent":    4,
		"MultiPortLogin": 5,
	}
)

func (x AuthSubType) Enum() *AuthSubType {
	p := new(AuthSubType)
	*p = x
	return p
}

func (x AuthSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[1].Descriptor()
}

func (AuthSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[1]
}

func (x AuthSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthSubType.Descriptor instead.
func (AuthSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{1}
}

//用户模块子模块定义
type UsersSubType int32

const (
	UsersSubType_Ust_undefined          UsersSubType = 0  //proto3必须从0开始
	UsersSubType_GetUsers               UsersSubType = 1  //*< 根据用户标示返回用户信息
	UsersSubType_UpdateMyProfile        UsersSubType = 2  //*< 更新当前用户信息
	UsersSubType_SyncMyProfileEvent     UsersSubType = 3  //*< 登录成功后;用户资料增量更新事件
	UsersSubType_SyncUpdateProfileEvent UsersSubType = 4  //*< 用户资料更新事件;同一账号其他终端修改个人资料会触发该事件
	UsersSubType_MarkTag                UsersSubType = 5  //*< 用户打标
	UsersSubType_SyncTagsEvent          UsersSubType = 6  //*< 同步用户标签信息
	UsersSubType_UpdatePushToken        UsersSubType = 7  //*< 更新移动推送Token
	UsersSubType_SyncMarkTagEvent       UsersSubType = 8  //*< 同步其他终端用户标签事件
	UsersSubType_PullAllRobots          UsersSubType = 9  //*< 获取全部机器人列表
	UsersSubType_IsRobot                UsersSubType = 10 //*< 是否是机器人账号
	UsersSubType_RobotChangedEvent      UsersSubType = 11 //*< 机器人改变事件
)

// Enum value maps for UsersSubType.
var (
	UsersSubType_name = map[int32]string{
		0:  "Ust_undefined",
		1:  "GetUsers",
		2:  "UpdateMyProfile",
		3:  "SyncMyProfileEvent",
		4:  "SyncUpdateProfileEvent",
		5:  "MarkTag",
		6:  "SyncTagsEvent",
		7:  "UpdatePushToken",
		8:  "SyncMarkTagEvent",
		9:  "PullAllRobots",
		10: "IsRobot",
		11: "RobotChangedEvent",
	}
	UsersSubType_value = map[string]int32{
		"Ust_undefined":          0,
		"GetUsers":               1,
		"UpdateMyProfile":        2,
		"SyncMyProfileEvent":     3,
		"SyncUpdateProfileEvent": 4,
		"MarkTag":                5,
		"SyncTagsEvent":          6,
		"UpdatePushToken":        7,
		"SyncMarkTagEvent":       8,
		"PullAllRobots":          9,
		"IsRobot":                10,
		"RobotChangedEvent":      11,
	}
)

func (x UsersSubType) Enum() *UsersSubType {
	p := new(UsersSubType)
	*p = x
	return p
}

func (x UsersSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsersSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[2].Descriptor()
}

func (UsersSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[2]
}

func (x UsersSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsersSubType.Descriptor instead.
func (UsersSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{2}
}

//好友模块子模块定义
type FriendsSubType int32

const (
	FriendsSubType_Fst_undefined         FriendsSubType = 0 //proto3必须从0开始
	FriendsSubType_FriendRequest         FriendsSubType = 1 //*< 好友请求(直接添加/发起好友验证/拒绝/通过)
	FriendsSubType_SyncFriendsEvent      FriendsSubType = 2 //*< 好友关系列表同步
	FriendsSubType_SyncFriendUsersEvent  FriendsSubType = 3 //*< 好友用户信息同步
	FriendsSubType_UpdateFriend          FriendsSubType = 4 //*< 更新好友信息
	FriendsSubType_DeleteFriend          FriendsSubType = 5 //*< 删除好友
	FriendsSubType_SyncUpdateFriendEvent FriendsSubType = 6 //*< 多终端更新好友信息同步事件
	FriendsSubType_GetFriends            FriendsSubType = 7 //*<增量同步好友列表
)

// Enum value maps for FriendsSubType.
var (
	FriendsSubType_name = map[int32]string{
		0: "Fst_undefined",
		1: "FriendRequest",
		2: "SyncFriendsEvent",
		3: "SyncFriendUsersEvent",
		4: "UpdateFriend",
		5: "DeleteFriend",
		6: "SyncUpdateFriendEvent",
		7: "GetFriends",
	}
	FriendsSubType_value = map[string]int32{
		"Fst_undefined":         0,
		"FriendRequest":         1,
		"SyncFriendsEvent":      2,
		"SyncFriendUsersEvent":  3,
		"UpdateFriend":          4,
		"DeleteFriend":          5,
		"SyncUpdateFriendEvent": 6,
		"GetFriends":            7,
	}
)

func (x FriendsSubType) Enum() *FriendsSubType {
	p := new(FriendsSubType)
	*p = x
	return p
}

func (x FriendsSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendsSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[3].Descriptor()
}

func (FriendsSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[3]
}

func (x FriendsSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendsSubType.Descriptor instead.
func (FriendsSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{3}
}

//群组模块子模块定义
type GroupSubType int32

const (
	GroupSubType_Gst_undefined        GroupSubType = 0  //proto3必须从0开始
	GroupSubType_CreateGroup          GroupSubType = 1  //*< 1.  创建群组
	GroupSubType_GetGroupMembers      GroupSubType = 2  //*< 2.  获取群成员
	GroupSubType_GetGroup             GroupSubType = 3  //*< 3.  查询群组
	GroupSubType_InviteGroupMembers   GroupSubType = 4  //*< 4.  邀请用户加群
	GroupSubType_RemoveGroupMembers   GroupSubType = 5  //*< 5.  删除群组成员
	GroupSubType_AcceptGroupInvite    GroupSubType = 6  //*< 6.  接受群邀请
	GroupSubType_RejectGroupInvite    GroupSubType = 7  //*< 7.  拒绝群邀请
	GroupSubType_ApplyGroup           GroupSubType = 8  //*< 8.  申请加群
	GroupSubType_PassGroupApply       GroupSubType = 9  //*< 9.  通过群申请
	GroupSubType_RejectGroupApply     GroupSubType = 10 //*< 10. 拒绝群申请
	GroupSubType_UpdateGroup          GroupSubType = 11 //*< 11. 更新群资料
	GroupSubType_GetGroupHistoryMsgs  GroupSubType = 12 //*< 12. 获取群组历史消息
	GroupSubType_DismissGroup         GroupSubType = 13 //*< 13. 解散群组
	GroupSubType_LeaveGroup           GroupSubType = 14 //*< 14. 离开群组
	GroupSubType_AddGroupManagers     GroupSubType = 15 //*< 15. 设置群管理员
	GroupSubType_RemoveGroupManagers  GroupSubType = 16 //*< 16. 取消群管理员
	GroupSubType_TransferGroup        GroupSubType = 17 //*< 17. 转让群
	GroupSubType_SyncMyGroupsEvent    GroupSubType = 18 //*< 18. 同步群组事件
	GroupSubType_GroupChangeEvent     GroupSubType = 20 //*< 20. 群变更事件
	GroupSubType_MuteGroup            GroupSubType = 21 //*< 21. 修改群禁言模式
	GroupSubType_MuteGroupMember      GroupSubType = 22 //*< 22. 设置群成员禁言
	GroupSubType_SetNotifyType        GroupSubType = 23 //*< 23. 修改群组消息通知方式
	GroupSubType_SetNick              GroupSubType = 24 //*< 24. 设置群昵称
	GroupSubType_SetMemberNick        GroupSubType = 25 //*< 25. 设置群成员昵称
	GroupSubType_SyncGroupChangeEvent GroupSubType = 26 //*< 26. 同步群组系统事件
	GroupSubType_GetTribeMembers      GroupSubType = 27 //*< 28. 分页获取部落成员信息
	GroupSubType_UpdateMyInfo         GroupSubType = 28 //*< 23. 修改个人群资料
	GroupSubType_UpdateMemberInfo     GroupSubType = 29 //*< 25. 设置群成员资料
	GroupSubType_PullGroupMembers     GroupSubType = 30 //*< 29. 根据群成员ID获取群成员信息
	GroupSubType_GetMyGroups          GroupSubType = 31 //*< 30. 增量群组信息
	GroupSubType_SyncCreateGroup      GroupSubType = 32 //*< 27. 创建群组多终端同步事件
	GroupSubType_CheckGroupInvite     GroupSubType = 33 //*< 31. 管理员审核邀请入群
)

// Enum value maps for GroupSubType.
var (
	GroupSubType_name = map[int32]string{
		0:  "Gst_undefined",
		1:  "CreateGroup",
		2:  "GetGroupMembers",
		3:  "GetGroup",
		4:  "InviteGroupMembers",
		5:  "RemoveGroupMembers",
		6:  "AcceptGroupInvite",
		7:  "RejectGroupInvite",
		8:  "ApplyGroup",
		9:  "PassGroupApply",
		10: "RejectGroupApply",
		11: "UpdateGroup",
		12: "GetGroupHistoryMsgs",
		13: "DismissGroup",
		14: "LeaveGroup",
		15: "AddGroupManagers",
		16: "RemoveGroupManagers",
		17: "TransferGroup",
		18: "SyncMyGroupsEvent",
		20: "GroupChangeEvent",
		21: "MuteGroup",
		22: "MuteGroupMember",
		23: "SetNotifyType",
		24: "SetNick",
		25: "SetMemberNick",
		26: "SyncGroupChangeEvent",
		27: "GetTribeMembers",
		28: "UpdateMyInfo",
		29: "UpdateMemberInfo",
		30: "PullGroupMembers",
		31: "GetMyGroups",
		32: "SyncCreateGroup",
		33: "CheckGroupInvite",
	}
	GroupSubType_value = map[string]int32{
		"Gst_undefined":        0,
		"CreateGroup":          1,
		"GetGroupMembers":      2,
		"GetGroup":             3,
		"InviteGroupMembers":   4,
		"RemoveGroupMembers":   5,
		"AcceptGroupInvite":    6,
		"RejectGroupInvite":    7,
		"ApplyGroup":           8,
		"PassGroupApply":       9,
		"RejectGroupApply":     10,
		"UpdateGroup":          11,
		"GetGroupHistoryMsgs":  12,
		"DismissGroup":         13,
		"LeaveGroup":           14,
		"AddGroupManagers":     15,
		"RemoveGroupManagers":  16,
		"TransferGroup":        17,
		"SyncMyGroupsEvent":    18,
		"GroupChangeEvent":     20,
		"MuteGroup":            21,
		"MuteGroupMember":      22,
		"SetNotifyType":        23,
		"SetNick":              24,
		"SetMemberNick":        25,
		"SyncGroupChangeEvent": 26,
		"GetTribeMembers":      27,
		"UpdateMyInfo":         28,
		"UpdateMemberInfo":     29,
		"PullGroupMembers":     30,
		"GetMyGroups":          31,
		"SyncCreateGroup":      32,
		"CheckGroupInvite":     33,
	}
)

func (x GroupSubType) Enum() *GroupSubType {
	p := new(GroupSubType)
	*p = x
	return p
}

func (x GroupSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[4].Descriptor()
}

func (GroupSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[4]
}

func (x GroupSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupSubType.Descriptor instead.
func (GroupSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{4}
}

//消息模块子模块定义
type ChatMsgSubType int32

const (
	ChatMsgSubType_Cst_undefined                ChatMsgSubType = 0  //proto3必须从0开始
	ChatMsgSubType_SendMsg                      ChatMsgSubType = 1  //*< 1.  发送个人消息
	ChatMsgSubType_RecvMsgEvent                 ChatMsgSubType = 2  //*< 2.  接收个人消息事件
	ChatMsgSubType_SendGroupMsg                 ChatMsgSubType = 3  //*< 3.  发送群消息
	ChatMsgSubType_RecvGroupMsgEvent            ChatMsgSubType = 4  //*< 4.  接收群组消息事件
	ChatMsgSubType_RecvSysMsgEvent              ChatMsgSubType = 5  //*< 15. 接收系统消息
	ChatMsgSubType_SyncOfflineSysMsgsEvent      ChatMsgSubType = 6  //*< 5.  同步系统离线消息
	ChatMsgSubType_BatchMarkRevced              ChatMsgSubType = 7  //*< 6.  批量确认消息送达
	ChatMsgSubType_MarkConversationAck          ChatMsgSubType = 8  //*< 7.  确认会话
	ChatMsgSubType_SyncConversationAckEvent     ChatMsgSubType = 9  //*< 8.  同步会话最大确认时间
	ChatMsgSubType_ReadHistoryMsgs              ChatMsgSubType = 10 //*< 9.  拉取用户消息 拉取C2C私聊消息
	ChatMsgSubType_ReadGroupHistoryMsgs         ChatMsgSubType = 11 //*< 10. 拉取群组消息
	ChatMsgSubType_DeleteSessions               ChatMsgSubType = 12 //*< 11. 删除服务器会话
	ChatMsgSubType_SyncSysMsgUpdateEvent        ChatMsgSubType = 13 //*< 16. 同步系统消息更新状态
	ChatMsgSubType_MarkSysMsgAck                ChatMsgSubType = 14 //*< 17. 确认系统消息已读
	ChatMsgSubType_RecvGroupNotificationEvent   ChatMsgSubType = 15 //*< 18. 接收群组通知事件
	ChatMsgSubType_GetCurrentSeqACK             ChatMsgSubType = 16 //*< 19. 获取会话序列号
	ChatMsgSubType_SyncSendMsgEvent             ChatMsgSubType = 17 //*< 12. 发送个人消息多终端同步事件
	ChatMsgSubType_SyncSendGroupMsgEvent        ChatMsgSubType = 18 //*< 13. 发送群组消息多终端同步事件
	ChatMsgSubType_SyncMarkConversationAckEvent ChatMsgSubType = 19 //*< 14. 同步其他终端确认会话事件
	ChatMsgSubType_SyncMySysMsgUpdateEvent      ChatMsgSubType = 20 //*< 20. 同步系统消息更新状态
	ChatMsgSubType_SendCancelMsg                ChatMsgSubType = 21 //*< 21. 发送撤销消息
	ChatMsgSubType_RecvCancelMsgEvent           ChatMsgSubType = 22 //*< 22. 接收撤销消息事件
	ChatMsgSubType_SyncSendCancelMsgEvent       ChatMsgSubType = 23 //*< 23. 同步发送撤销消息事件
	ChatMsgSubType_UpdateConversation           ChatMsgSubType = 24 //*< 24. 更新会话
	ChatMsgSubType_SyncUpdateConversationEvent  ChatMsgSubType = 25 //*< 25. 同步更新会话
	ChatMsgSubType_SendTransparentMsg           ChatMsgSubType = 26 //* 26. 发送透传消息
	ChatMsgSubType_RecvTransparentMsg           ChatMsgSubType = 27 //* 27. 接收透传消息
	ChatMsgSubType_SyncSendTransparentMsg       ChatMsgSubType = 28 //* 28. 同步发送透传消息
	ChatMsgSubType_SyncCancelMsgEvent           ChatMsgSubType = 29 //* 29. 同步撤销消息事件
)

// Enum value maps for ChatMsgSubType.
var (
	ChatMsgSubType_name = map[int32]string{
		0:  "Cst_undefined",
		1:  "SendMsg",
		2:  "RecvMsgEvent",
		3:  "SendGroupMsg",
		4:  "RecvGroupMsgEvent",
		5:  "RecvSysMsgEvent",
		6:  "SyncOfflineSysMsgsEvent",
		7:  "BatchMarkRevced",
		8:  "MarkConversationAck",
		9:  "SyncConversationAckEvent",
		10: "ReadHistoryMsgs",
		11: "ReadGroupHistoryMsgs",
		12: "DeleteSessions",
		13: "SyncSysMsgUpdateEvent",
		14: "MarkSysMsgAck",
		15: "RecvGroupNotificationEvent",
		16: "GetCurrentSeqACK",
		17: "SyncSendMsgEvent",
		18: "SyncSendGroupMsgEvent",
		19: "SyncMarkConversationAckEvent",
		20: "SyncMySysMsgUpdateEvent",
		21: "SendCancelMsg",
		22: "RecvCancelMsgEvent",
		23: "SyncSendCancelMsgEvent",
		24: "UpdateConversation",
		25: "SyncUpdateConversationEvent",
		26: "SendTransparentMsg",
		27: "RecvTransparentMsg",
		28: "SyncSendTransparentMsg",
		29: "SyncCancelMsgEvent",
	}
	ChatMsgSubType_value = map[string]int32{
		"Cst_undefined":                0,
		"SendMsg":                      1,
		"RecvMsgEvent":                 2,
		"SendGroupMsg":                 3,
		"RecvGroupMsgEvent":            4,
		"RecvSysMsgEvent":              5,
		"SyncOfflineSysMsgsEvent":      6,
		"BatchMarkRevced":              7,
		"MarkConversationAck":          8,
		"SyncConversationAckEvent":     9,
		"ReadHistoryMsgs":              10,
		"ReadGroupHistoryMsgs":         11,
		"DeleteSessions":               12,
		"SyncSysMsgUpdateEvent":        13,
		"MarkSysMsgAck":                14,
		"RecvGroupNotificationEvent":   15,
		"GetCurrentSeqACK":             16,
		"SyncSendMsgEvent":             17,
		"SyncSendGroupMsgEvent":        18,
		"SyncMarkConversationAckEvent": 19,
		"SyncMySysMsgUpdateEvent":      20,
		"SendCancelMsg":                21,
		"RecvCancelMsgEvent":           22,
		"SyncSendCancelMsgEvent":       23,
		"UpdateConversation":           24,
		"SyncUpdateConversationEvent":  25,
		"SendTransparentMsg":           26,
		"RecvTransparentMsg":           27,
		"SyncSendTransparentMsg":       28,
		"SyncCancelMsgEvent":           29,
	}
)

func (x ChatMsgSubType) Enum() *ChatMsgSubType {
	p := new(ChatMsgSubType)
	*p = x
	return p
}

func (x ChatMsgSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMsgSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[5].Descriptor()
}

func (ChatMsgSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[5]
}

func (x ChatMsgSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMsgSubType.Descriptor instead.
func (ChatMsgSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{5}
}

//同步模块子模块定义
type SyncSubType int32

const (
	SyncSubType_Syn_undefined SyncSubType = 0 //proto3必须从0开始
	SyncSubType_SyncEvent     SyncSubType = 1 //*< 1. 同步请求
	SyncSubType_SyncDoneEvent SyncSubType = 2 //*< 2. 同步结束事件
)

// Enum value maps for SyncSubType.
var (
	SyncSubType_name = map[int32]string{
		0: "Syn_undefined",
		1: "SyncEvent",
		2: "SyncDoneEvent",
	}
	SyncSubType_value = map[string]int32{
		"Syn_undefined": 0,
		"SyncEvent":     1,
		"SyncDoneEvent": 2,
	}
)

func (x SyncSubType) Enum() *SyncSubType {
	p := new(SyncSubType)
	*p = x
	return p
}

func (x SyncSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_global_Global_proto_enumTypes[6].Descriptor()
}

func (SyncSubType) Type() protoreflect.EnumType {
	return &file_api_proto_global_Global_proto_enumTypes[6]
}

func (x SyncSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncSubType.Descriptor instead.
func (SyncSubType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_global_Global_proto_rawDescGZIP(), []int{6}
}

var File_api_proto_global_Global_proto protoreflect.FileDescriptor

var file_api_proto_global_Global_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x6d, 0x69, 0x2e, 0x69, 0x6d,
	0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2a, 0x61, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x74, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x10, 0x05,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x06, 0x2a, 0x68, 0x0a, 0x0b, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x73, 0x74,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e,
	0x4f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x69, 0x63, 0x6b, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x10, 0x05, 0x2a, 0xfa, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x79, 0x6e, 0x63, 0x4d, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x61, 0x67, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x72, 0x6b,
	0x54, 0x61, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x75,
	0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x10, 0x09, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x0b, 0x2a, 0xb5, 0x01, 0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79,
	0x6e, 0x63, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x07, 0x2a, 0xa8, 0x05, 0x0a, 0x0c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x73,
	0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x10,
	0x05, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x07, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x08, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67,
	0x73, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x73, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x4d,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x12, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x62,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x20, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x10, 0x21, 0x2a, 0xe4, 0x05, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x73, 0x74, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x76, 0x4d,
	0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x6e,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x65, 0x63, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x76, 0x53, 0x79, 0x73, 0x4d, 0x73, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72,
	0x6b, 0x52, 0x65, 0x76, 0x63, 0x65, 0x64, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b,
	0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x09,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x73, 0x67, 0x73, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x73, 0x10, 0x0b, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x79, 0x73, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0d, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x6b, 0x10,
	0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x0f, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x71, 0x41, 0x43, 0x4b, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x11, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x79, 0x53, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65,
	0x63, 0x76, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x17, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x1a, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x76, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x1d, 0x2a, 0x42, 0x0a, 0x0b, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x79,
	0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x79, 0x6e, 0x63, 0x44, 0x6f, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x42,
	0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69,
	0x61, 0x6e, 0x6d, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_global_Global_proto_rawDescOnce sync.Once
	file_api_proto_global_Global_proto_rawDescData = file_api_proto_global_Global_proto_rawDesc
)

func file_api_proto_global_Global_proto_rawDescGZIP() []byte {
	file_api_proto_global_Global_proto_rawDescOnce.Do(func() {
		file_api_proto_global_Global_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_global_Global_proto_rawDescData)
	})
	return file_api_proto_global_Global_proto_rawDescData
}

var file_api_proto_global_Global_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_api_proto_global_Global_proto_goTypes = []interface{}{
	(BusinessType)(0),   // 0: cloud.lianmi.im.global.BusinessType
	(AuthSubType)(0),    // 1: cloud.lianmi.im.global.AuthSubType
	(UsersSubType)(0),   // 2: cloud.lianmi.im.global.UsersSubType
	(FriendsSubType)(0), // 3: cloud.lianmi.im.global.FriendsSubType
	(GroupSubType)(0),   // 4: cloud.lianmi.im.global.GroupSubType
	(ChatMsgSubType)(0), // 5: cloud.lianmi.im.global.ChatMsgSubType
	(SyncSubType)(0),    // 6: cloud.lianmi.im.global.SyncSubType
}
var file_api_proto_global_Global_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_proto_global_Global_proto_init() }
func file_api_proto_global_Global_proto_init() {
	if File_api_proto_global_Global_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_global_Global_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_global_Global_proto_goTypes,
		DependencyIndexes: file_api_proto_global_Global_proto_depIdxs,
		EnumInfos:         file_api_proto_global_Global_proto_enumTypes,
	}.Build()
	File_api_proto_global_Global_proto = out.File
	file_api_proto_global_Global_proto_rawDesc = nil
	file_api_proto_global_Global_proto_goTypes = nil
	file_api_proto_global_Global_proto_depIdxs = nil
}
